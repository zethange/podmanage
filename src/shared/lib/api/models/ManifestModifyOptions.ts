/* tslint:disable */
/* eslint-disable */
/**
 * supports a RESTful API for the Libpod library
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-system-service(1) for more information.  Quick Examples:  \'podman info\'  curl --unix-socket /run/podman/podman.sock http://d/v5.0.0/libpod/info  \'podman pull quay.io/containers/podman\'  curl -XPOST --unix-socket /run/podman/podman.sock -v \'http://d/v5.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman\'  \'podman list images\'  curl --unix-socket /run/podman/podman.sock -v \'http://d/v5.0.0/libpod/images/json\' | jq
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: podman@lists.podman.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * swagger 2.0 does not support oneOf for schema validation.
 * 
 * Operation "update" uses all fields.
 * Operation "remove" uses fields: Operation and Images
 * Operation "annotate" uses fields: Operation and Annotations
 * @export
 * @interface ManifestModifyOptions
 */
export interface ManifestModifyOptions {
    /**
     * True when operating on a list to include all images
     * @type {boolean}
     * @memberof ManifestModifyOptions
     */
    all?: boolean;
    /**
     * Annotation to add to the item in the manifest list
     * @type {Array<string>}
     * @memberof ManifestModifyOptions
     */
    annotation?: Array<string>;
    /**
     * Annotations to add to the item in the manifest list by a map which is preferred over Annotation
     * @type {{ [key: string]: string; }}
     * @memberof ManifestModifyOptions
     */
    annotations?: { [key: string]: string; };
    /**
     * Arch overrides the architecture for the item in the manifest list
     * @type {string}
     * @memberof ManifestModifyOptions
     */
    arch?: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof ManifestModifyOptions
     */
    artifactAnnotations?: { [key: string]: string; };
    /**
     * 
     * @type {string}
     * @memberof ManifestModifyOptions
     */
    artifactConfig?: string;
    /**
     * 
     * @type {string}
     * @memberof ManifestModifyOptions
     */
    artifactConfigType?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ManifestModifyOptions
     */
    artifactExcludeTitles?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof ManifestModifyOptions
     */
    artifactFiles?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ManifestModifyOptions
     */
    artifactLayerType?: string;
    /**
     * 
     * @type {string}
     * @memberof ManifestModifyOptions
     */
    artifactSubject?: string;
    /**
     * The following are all of the fields from ManifestAddArtifactOptions.
     * We can't just embed the whole structure because it embeds a
     * ManifestAnnotateOptions, which would conflict with the one that
     * ManifestAddOptions embeds.
     * @type {string}
     * @memberof ManifestModifyOptions
     */
    artifactType?: string;
    /**
     * Feature list for the item in the manifest list
     * @type {Array<string>}
     * @memberof ManifestModifyOptions
     */
    features?: Array<string>;
    /**
     * Images is an optional list of image references to add to manifest list
     * @type {Array<string>}
     * @memberof ManifestModifyOptions
     */
    images?: Array<string>;
    /**
     * IndexAnnotation is a slice of key=value annotations to add to the manifest list itself
     * @type {Array<string>}
     * @memberof ManifestModifyOptions
     */
    indexAnnotation?: Array<string>;
    /**
     * IndexAnnotations is a map of key:value annotations to add to the manifest list itself, by a map which is preferred over IndexAnnotation
     * @type {{ [key: string]: string; }}
     * @memberof ManifestModifyOptions
     */
    indexAnnotations?: { [key: string]: string; };
    /**
     * 
     * @type {string}
     * @memberof ManifestModifyOptions
     */
    operation?: string;
    /**
     * OS overrides the operating system for the item in the manifest list
     * @type {string}
     * @memberof ManifestModifyOptions
     */
    os?: string;
    /**
     * OS features for the item in the manifest list
     * @type {Array<string>}
     * @memberof ManifestModifyOptions
     */
    osFeatures?: Array<string>;
    /**
     * OSVersion overrides the operating system for the item in the manifest list
     * @type {string}
     * @memberof ManifestModifyOptions
     */
    osVersion?: string;
    /**
     * IndexSubject is a subject value to set in the manifest list itself
     * @type {string}
     * @memberof ManifestModifyOptions
     */
    subject?: string;
    /**
     * Variant for the item in the manifest list
     * @type {string}
     * @memberof ManifestModifyOptions
     */
    variant?: string;
}

/**
 * Check if a given object implements the ManifestModifyOptions interface.
 */
export function instanceOfManifestModifyOptions(value: object): value is ManifestModifyOptions {
    return true;
}

export function ManifestModifyOptionsFromJSON(json: any): ManifestModifyOptions {
    return ManifestModifyOptionsFromJSONTyped(json, false);
}

export function ManifestModifyOptionsFromJSONTyped(json: any, ignoreDiscriminator: boolean): ManifestModifyOptions {
    if (json == null) {
        return json;
    }
    return {
        
        'all': json['all'] == null ? undefined : json['all'],
        'annotation': json['annotation'] == null ? undefined : json['annotation'],
        'annotations': json['annotations'] == null ? undefined : json['annotations'],
        'arch': json['arch'] == null ? undefined : json['arch'],
        'artifactAnnotations': json['artifact_annotations'] == null ? undefined : json['artifact_annotations'],
        'artifactConfig': json['artifact_config'] == null ? undefined : json['artifact_config'],
        'artifactConfigType': json['artifact_config_type'] == null ? undefined : json['artifact_config_type'],
        'artifactExcludeTitles': json['artifact_exclude_titles'] == null ? undefined : json['artifact_exclude_titles'],
        'artifactFiles': json['artifact_files'] == null ? undefined : json['artifact_files'],
        'artifactLayerType': json['artifact_layer_type'] == null ? undefined : json['artifact_layer_type'],
        'artifactSubject': json['artifact_subject'] == null ? undefined : json['artifact_subject'],
        'artifactType': json['artifact_type'] == null ? undefined : json['artifact_type'],
        'features': json['features'] == null ? undefined : json['features'],
        'images': json['images'] == null ? undefined : json['images'],
        'indexAnnotation': json['index_annotation'] == null ? undefined : json['index_annotation'],
        'indexAnnotations': json['index_annotations'] == null ? undefined : json['index_annotations'],
        'operation': json['operation'] == null ? undefined : json['operation'],
        'os': json['os'] == null ? undefined : json['os'],
        'osFeatures': json['os_features'] == null ? undefined : json['os_features'],
        'osVersion': json['os_version'] == null ? undefined : json['os_version'],
        'subject': json['subject'] == null ? undefined : json['subject'],
        'variant': json['variant'] == null ? undefined : json['variant'],
    };
}

export function ManifestModifyOptionsToJSON(value?: ManifestModifyOptions | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'all': value['all'],
        'annotation': value['annotation'],
        'annotations': value['annotations'],
        'arch': value['arch'],
        'artifact_annotations': value['artifactAnnotations'],
        'artifact_config': value['artifactConfig'],
        'artifact_config_type': value['artifactConfigType'],
        'artifact_exclude_titles': value['artifactExcludeTitles'],
        'artifact_files': value['artifactFiles'],
        'artifact_layer_type': value['artifactLayerType'],
        'artifact_subject': value['artifactSubject'],
        'artifact_type': value['artifactType'],
        'features': value['features'],
        'images': value['images'],
        'index_annotation': value['indexAnnotation'],
        'index_annotations': value['indexAnnotations'],
        'operation': value['operation'],
        'os': value['os'],
        'os_features': value['osFeatures'],
        'os_version': value['osVersion'],
        'subject': value['subject'],
        'variant': value['variant'],
    };
}

