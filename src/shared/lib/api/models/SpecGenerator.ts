/* tslint:disable */
/* eslint-disable */
/**
 * supports a RESTful API for the Libpod library
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-system-service(1) for more information.  Quick Examples:  \'podman info\'  curl --unix-socket /run/podman/podman.sock http://d/v5.0.0/libpod/info  \'podman pull quay.io/containers/podman\'  curl -XPOST --unix-socket /run/podman/podman.sock -v \'http://d/v5.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman\'  \'podman list images\'  curl --unix-socket /run/podman/podman.sock -v \'http://d/v5.0.0/libpod/images/json\' | jq
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: podman@lists.podman.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { LinuxDeviceCgroup } from './LinuxDeviceCgroup';
import {
    LinuxDeviceCgroupFromJSON,
    LinuxDeviceCgroupFromJSONTyped,
    LinuxDeviceCgroupToJSON,
} from './LinuxDeviceCgroup';
import type { LinuxIntelRdt } from './LinuxIntelRdt';
import {
    LinuxIntelRdtFromJSON,
    LinuxIntelRdtFromJSONTyped,
    LinuxIntelRdtToJSON,
} from './LinuxIntelRdt';
import type { LogConfigLibpod } from './LogConfigLibpod';
import {
    LogConfigLibpodFromJSON,
    LogConfigLibpodFromJSONTyped,
    LogConfigLibpodToJSON,
} from './LogConfigLibpod';
import type { Mount } from './Mount';
import {
    MountFromJSON,
    MountFromJSONTyped,
    MountToJSON,
} from './Mount';
import type { NamedVolume } from './NamedVolume';
import {
    NamedVolumeFromJSON,
    NamedVolumeFromJSONTyped,
    NamedVolumeToJSON,
} from './NamedVolume';
import type { IDMappingOptions } from './IDMappingOptions';
import {
    IDMappingOptionsFromJSON,
    IDMappingOptionsFromJSONTyped,
    IDMappingOptionsToJSON,
} from './IDMappingOptions';
import type { LinuxResources } from './LinuxResources';
import {
    LinuxResourcesFromJSON,
    LinuxResourcesFromJSONTyped,
    LinuxResourcesToJSON,
} from './LinuxResources';
import type { Namespace } from './Namespace';
import {
    NamespaceFromJSON,
    NamespaceFromJSONTyped,
    NamespaceToJSON,
} from './Namespace';
import type { POSIXRlimit } from './POSIXRlimit';
import {
    POSIXRlimitFromJSON,
    POSIXRlimitFromJSONTyped,
    POSIXRlimitToJSON,
} from './POSIXRlimit';
import type { Secret } from './Secret';
import {
    SecretFromJSON,
    SecretFromJSONTyped,
    SecretToJSON,
} from './Secret';
import type { LinuxWeightDevice } from './LinuxWeightDevice';
import {
    LinuxWeightDeviceFromJSON,
    LinuxWeightDeviceFromJSONTyped,
    LinuxWeightDeviceToJSON,
} from './LinuxWeightDevice';
import type { StartupHealthCheck } from './StartupHealthCheck';
import {
    StartupHealthCheckFromJSON,
    StartupHealthCheckFromJSONTyped,
    StartupHealthCheckToJSON,
} from './StartupHealthCheck';
import type { Schema2HealthConfig } from './Schema2HealthConfig';
import {
    Schema2HealthConfigFromJSON,
    Schema2HealthConfigFromJSONTyped,
    Schema2HealthConfigToJSON,
} from './Schema2HealthConfig';
import type { LinuxThrottleDevice } from './LinuxThrottleDevice';
import {
    LinuxThrottleDeviceFromJSON,
    LinuxThrottleDeviceFromJSONTyped,
    LinuxThrottleDeviceToJSON,
} from './LinuxThrottleDevice';
import type { PerNetworkOptions } from './PerNetworkOptions';
import {
    PerNetworkOptionsFromJSON,
    PerNetworkOptionsFromJSONTyped,
    PerNetworkOptionsToJSON,
} from './PerNetworkOptions';
import type { OverlayVolume } from './OverlayVolume';
import {
    OverlayVolumeFromJSON,
    OverlayVolumeFromJSONTyped,
    OverlayVolumeToJSON,
} from './OverlayVolume';
import type { LinuxDevice } from './LinuxDevice';
import {
    LinuxDeviceFromJSON,
    LinuxDeviceFromJSONTyped,
    LinuxDeviceToJSON,
} from './LinuxDevice';
import type { PortMapping } from './PortMapping';
import {
    PortMappingFromJSON,
    PortMappingFromJSONTyped,
    PortMappingToJSON,
} from './PortMapping';
import type { ImageVolume } from './ImageVolume';
import {
    ImageVolumeFromJSON,
    ImageVolumeFromJSONTyped,
    ImageVolumeToJSON,
} from './ImageVolume';
import type { LinuxPersonality } from './LinuxPersonality';
import {
    LinuxPersonalityFromJSON,
    LinuxPersonalityFromJSONTyped,
    LinuxPersonalityToJSON,
} from './LinuxPersonality';

/**
 * SpecGenerator creates an OCI spec and Libpod configuration options to create
 * a container based on the given configuration.
 * @export
 * @interface SpecGenerator
 */
export interface SpecGenerator {
    /**
     * Map of networks names or ids that the container should join.
     * You can request additional settings for each network, you can
     * set network aliases, static ips, static mac address  and the
     * network interface name for this container on the specific network.
     * If the map is empty and the bridge network mode is set the container
     * will be joined to the default network.
     * Optional.
     * @type {{ [key: string]: PerNetworkOptions; }}
     * @memberof SpecGenerator
     */
    networks?: { [key: string]: PerNetworkOptions; };
    /**
     * Annotations are key-value options passed into the container runtime
     * that can be used to trigger special behavior.
     * Optional.
     * @type {{ [key: string]: string; }}
     * @memberof SpecGenerator
     */
    annotations?: { [key: string]: string; };
    /**
     * ApparmorProfile is the name of the Apparmor profile the container
     * will use.
     * Optional.
     * @type {string}
     * @memberof SpecGenerator
     */
    apparmorProfile?: string;
    /**
     * BaseHostsFile is the path to a hosts file, the entries from this file
     * are added to the containers hosts file. As special value "image" is
     * allowed which uses the /etc/hosts file from within the image and "none"
     * which uses no base file at all. If it is empty we should default
     * to the base_hosts_file configuration in containers.conf.
     * Optional.
     * @type {string}
     * @memberof SpecGenerator
     */
    baseHostsFile?: string;
    /**
     * CapAdd are capabilities which will be added to the container.
     * Conflicts with Privileged.
     * Optional.
     * @type {Array<string>}
     * @memberof SpecGenerator
     */
    capAdd?: Array<string>;
    /**
     * CapDrop are capabilities which will be removed from the container.
     * Conflicts with Privileged.
     * Optional.
     * @type {Array<string>}
     * @memberof SpecGenerator
     */
    capDrop?: Array<string>;
    /**
     * CgroupParent is the container's Cgroup parent.
     * If not set, the default for the current cgroup driver will be used.
     * Optional.
     * @type {string}
     * @memberof SpecGenerator
     */
    cgroupParent?: string;
    /**
     * 
     * @type {Namespace}
     * @memberof SpecGenerator
     */
    cgroupns?: Namespace;
    /**
     * CgroupsMode sets a policy for how cgroups will be created for the
     * container, including the ability to disable creation entirely.
     * Optional.
     * @type {string}
     * @memberof SpecGenerator
     */
    cgroupsMode?: string;
    /**
     * ChrootDirs is an additional set of directories that need to be
     * treated as root directories. Standard bind mounts will be mounted
     * into paths relative to these directories.
     * Optional.
     * @type {Array<string>}
     * @memberof SpecGenerator
     */
    chrootDirectories?: Array<string>;
    /**
     * CNINetworks is a list of CNI networks to join the container to.
     * If this list is empty, the default CNI network will be joined
     * instead. If at least one entry is present, we will not join the
     * default network (unless it is part of this list).
     * Only available if NetNS is set to bridge.
     * Optional.
     * Deprecated: as of podman 4.0 use "Networks" instead.
     * @type {Array<string>}
     * @memberof SpecGenerator
     */
    cniNetworks?: Array<string>;
    /**
     * Command is the container's command.
     * If not given and Image is specified, this will be populated by the
     * image's configuration.
     * Optional.
     * @type {Array<string>}
     * @memberof SpecGenerator
     */
    command?: Array<string>;
    /**
     * ConmonPidFile is a path at which a PID file for Conmon will be
     * placed.
     * If not given, a default location will be used.
     * Optional.
     * @type {string}
     * @memberof SpecGenerator
     */
    conmonPidFile?: string;
    /**
     * ContainerCreateCommand is the command that was used to create this
     * container.
     * This will be shown in the output of Inspect() on the container, and
     * may also be used by some tools that wish to recreate the container
     * (e.g. `podman generate systemd --new`).
     * Optional.
     * @type {Array<string>}
     * @memberof SpecGenerator
     */
    containerCreateCommand?: Array<string>;
    /**
     * Create the working directory if it doesn't exist.
     * If unset, it doesn't create it.
     * Optional.
     * @type {boolean}
     * @memberof SpecGenerator
     */
    createWorkingDir?: boolean;
    /**
     * DependencyContainers is an array of containers this container
     * depends on. Dependency containers must be started before this
     * container. Dependencies can be specified by name or full/partial ID.
     * Optional.
     * @type {Array<string>}
     * @memberof SpecGenerator
     */
    dependencyContainers?: Array<string>;
    /**
     * DeviceCgroupRule are device cgroup rules that allow containers
     * to use additional types of devices.
     * @type {Array<LinuxDeviceCgroup>}
     * @memberof SpecGenerator
     */
    deviceCgroupRule?: Array<LinuxDeviceCgroup>;
    /**
     * Devices are devices that will be added to the container.
     * Optional.
     * @type {Array<LinuxDevice>}
     * @memberof SpecGenerator
     */
    devices?: Array<LinuxDevice>;
    /**
     * DevicesFrom specifies that this container will mount the device(s) from other container(s).
     * Optional.
     * @type {Array<string>}
     * @memberof SpecGenerator
     */
    devicesFrom?: Array<string>;
    /**
     * DNSOptions is a set of DNS options that will be used in the
     * container's resolv.conf, replacing the host's DNS options which are
     * used by default.
     * Conflicts with UseImageResolvConf.
     * Optional.
     * @type {Array<string>}
     * @memberof SpecGenerator
     */
    dnsOption?: Array<string>;
    /**
     * DNSSearch is a set of DNS search domains that will be used in the
     * container's resolv.conf, replacing the host's DNS search domains
     * which are used by default.
     * Conflicts with UseImageResolvConf.
     * Optional.
     * @type {Array<string>}
     * @memberof SpecGenerator
     */
    dnsSearch?: Array<string>;
    /**
     * DNSServers is a set of DNS servers that will be used in the
     * container's resolv.conf, replacing the host's DNS Servers which are
     * used by default.
     * Conflicts with UseImageResolvConf.
     * Optional.
     * @type {Array<string>}
     * @memberof SpecGenerator
     */
    dnsServer?: Array<string>;
    /**
     * Entrypoint is the container's entrypoint.
     * If not given and Image is specified, this will be populated by the
     * image's configuration.
     * Optional.
     * @type {Array<string>}
     * @memberof SpecGenerator
     */
    entrypoint?: Array<string>;
    /**
     * Env is a set of environment variables that will be set in the
     * container.
     * Optional.
     * @type {{ [key: string]: string; }}
     * @memberof SpecGenerator
     */
    env?: { [key: string]: string; };
    /**
     * EnvHost indicates that the host environment should be added to container
     * Optional.
     * @type {boolean}
     * @memberof SpecGenerator
     */
    envHost?: boolean;
    /**
     * EnvMerge takes the specified environment variables from image and preprocess them before injecting them into the
     * container.
     * Optional.
     * @type {Array<string>}
     * @memberof SpecGenerator
     */
    envmerge?: Array<string>;
    /**
     * Expose is a number of ports that will be forwarded to the container
     * if PublishExposedPorts is set.
     * Expose is a map of uint16 (port number) to a string representing
     * protocol i.e map[uint16]string. Allowed protocols are "tcp", "udp", and "sctp", or some
     * combination of the three separated by commas.
     * If protocol is set to "" we will assume TCP.
     * Only available if NetNS is set to Bridge or Slirp, and
     * PublishExposedPorts is set.
     * Optional.
     * @type {object}
     * @memberof SpecGenerator
     */
    expose?: object;
    /**
     * GroupEntry specifies an arbitrary string to append to the container's /etc/group file.
     * Optional.
     * @type {string}
     * @memberof SpecGenerator
     */
    groupEntry?: string;
    /**
     * Groups are a list of supplemental groups the container's user will
     * be granted access to.
     * Optional.
     * @type {Array<string>}
     * @memberof SpecGenerator
     */
    groups?: Array<string>;
    /**
     * HealthCheckOnFailureAction defines how Podman reacts when a container's health
     * status turns unhealthy.
     * @type {number}
     * @memberof SpecGenerator
     */
    healthCheckOnFailureAction?: number;
    /**
     * 
     * @type {Schema2HealthConfig}
     * @memberof SpecGenerator
     */
    healthconfig?: Schema2HealthConfig;
    /**
     * HostDeviceList is used to recreate the mounted device on inherited containers
     * @type {Array<LinuxDevice>}
     * @memberof SpecGenerator
     */
    hostDeviceList?: Array<LinuxDevice>;
    /**
     * HostAdd is a set of hosts which will be added to the container's
     * etc/hosts file.
     * Conflicts with UseImageHosts.
     * Optional.
     * @type {Array<string>}
     * @memberof SpecGenerator
     */
    hostadd?: Array<string>;
    /**
     * Hostname is the container's hostname. If not set, the hostname will
     * not be modified (if UtsNS is not private) or will be set to the
     * container ID (if UtsNS is private).
     * Conflicts with UtsNS if UtsNS is not set to private.
     * Optional.
     * @type {string}
     * @memberof SpecGenerator
     */
    hostname?: string;
    /**
     * HostUsers is a list of host usernames or UIDs to add to the container
     * etc/passwd file
     * @type {Array<string>}
     * @memberof SpecGenerator
     */
    hostusers?: Array<string>;
    /**
     * EnvHTTPProxy indicates that the http host proxy environment variables
     * should be added to container
     * Optional.
     * @type {boolean}
     * @memberof SpecGenerator
     */
    httpproxy?: boolean;
    /**
     * 
     * @type {IDMappingOptions}
     * @memberof SpecGenerator
     */
    idmappings?: IDMappingOptions;
    /**
     * Image is the image the container will be based on. The image will be
     * used as the container's root filesystem, and its environment vars,
     * volumes, and other configuration will be applied to the container.
     * Conflicts with Rootfs.
     * At least one of Image or Rootfs must be specified.
     * @type {string}
     * @memberof SpecGenerator
     */
    image?: string;
    /**
     * ImageArch is the user-specified image architecture.
     * Used to select a different variant from a manifest list.
     * Optional.
     * @type {string}
     * @memberof SpecGenerator
     */
    imageArch?: string;
    /**
     * ImageOS is the user-specified OS of the image.
     * Used to select a different variant from a manifest list.
     * Optional.
     * @type {string}
     * @memberof SpecGenerator
     */
    imageOs?: string;
    /**
     * ImageVariant is the user-specified image variant.
     * Used to select a different variant from a manifest list.
     * Optional.
     * @type {string}
     * @memberof SpecGenerator
     */
    imageVariant?: string;
    /**
     * ImageVolumeMode indicates how image volumes will be created.
     * Supported modes are "ignore" (do not create), "tmpfs" (create as
     * tmpfs), and "anonymous" (create as anonymous volumes).
     * The default if unset is anonymous.
     * Optional.
     * @type {string}
     * @memberof SpecGenerator
     */
    imageVolumeMode?: string;
    /**
     * Image volumes bind-mount a container-image mount into the container.
     * Optional.
     * @type {Array<ImageVolume>}
     * @memberof SpecGenerator
     */
    imageVolumes?: Array<ImageVolume>;
    /**
     * Init specifies that an init binary will be mounted into the
     * container, and will be used as PID1.
     * Optional.
     * @type {boolean}
     * @memberof SpecGenerator
     */
    init?: boolean;
    /**
     * InitContainerType describes if this container is an init container
     * and if so, what type: always or once.
     * Optional.
     * @type {string}
     * @memberof SpecGenerator
     */
    initContainerType?: string;
    /**
     * InitPath specifies the path to the init binary that will be added if
     * Init is specified above. If not specified, the default set in the
     * Libpod config will be used. Ignored if Init above is not set.
     * Optional.
     * @type {string}
     * @memberof SpecGenerator
     */
    initPath?: string;
    /**
     * 
     * @type {LinuxIntelRdt}
     * @memberof SpecGenerator
     */
    intelRdt?: LinuxIntelRdt;
    /**
     * 
     * @type {Namespace}
     * @memberof SpecGenerator
     */
    ipcns?: Namespace;
    /**
     * LabelNested indicates whether or not the container is allowed to
     * run fully nested containers including SELinux labelling.
     * Optional.
     * @type {boolean}
     * @memberof SpecGenerator
     */
    labelNested?: boolean;
    /**
     * Labels are key-value pairs that are used to add metadata to
     * containers.
     * Optional.
     * @type {{ [key: string]: string; }}
     * @memberof SpecGenerator
     */
    labels?: { [key: string]: string; };
    /**
     * 
     * @type {LogConfigLibpod}
     * @memberof SpecGenerator
     */
    logConfiguration?: LogConfigLibpod;
    /**
     * Passwd is a container run option that determines if we are validating users/groups before running the container
     * @type {boolean}
     * @memberof SpecGenerator
     */
    managePassword?: boolean;
    /**
     * Mask is the path we want to mask in the container. This masks the paths
     * given in addition to the default list.
     * Optional
     * @type {Array<string>}
     * @memberof SpecGenerator
     */
    mask?: Array<string>;
    /**
     * Mounts are mounts that will be added to the container.
     * These will supersede Image Volumes and VolumesFrom volumes where
     * there are conflicts.
     * Optional.
     * @type {Array<Mount>}
     * @memberof SpecGenerator
     */
    mounts?: Array<Mount>;
    /**
     * Name is the name the container will be given.
     * If no name is provided, one will be randomly generated.
     * Optional.
     * @type {string}
     * @memberof SpecGenerator
     */
    name?: string;
    /**
     * 
     * @type {Namespace}
     * @memberof SpecGenerator
     */
    netns?: Namespace;
    /**
     * NetworkOptions are additional options for each network
     * Optional.
     * @type {{ [key: string]: Array<string>; }}
     * @memberof SpecGenerator
     */
    networkOptions?: { [key: string]: Array<string>; };
    /**
     * NoNewPrivileges is whether the container will set the no new
     * privileges flag on create, which disables gaining additional
     * privileges (e.g. via setuid) in the container.
     * Optional.
     * @type {boolean}
     * @memberof SpecGenerator
     */
    noNewPrivileges?: boolean;
    /**
     * OCIRuntime is the name of the OCI runtime that will be used to create
     * the container.
     * If not specified, the default will be used.
     * Optional.
     * @type {string}
     * @memberof SpecGenerator
     */
    ociRuntime?: string;
    /**
     * OOMScoreAdj adjusts the score used by the OOM killer to determine
     * processes to kill for the container's process.
     * Optional.
     * @type {number}
     * @memberof SpecGenerator
     */
    oomScoreAdj?: number;
    /**
     * Overlay volumes are named volumes that will be added to the container.
     * Optional.
     * @type {Array<OverlayVolume>}
     * @memberof SpecGenerator
     */
    overlayVolumes?: Array<OverlayVolume>;
    /**
     * PasswdEntry specifies an arbitrary string to append to the container's /etc/passwd file.
     * Optional.
     * @type {string}
     * @memberof SpecGenerator
     */
    passwdEntry?: string;
    /**
     * 
     * @type {LinuxPersonality}
     * @memberof SpecGenerator
     */
    personality?: LinuxPersonality;
    /**
     * 
     * @type {Namespace}
     * @memberof SpecGenerator
     */
    pidns?: Namespace;
    /**
     * Pod is the ID of the pod the container will join.
     * Optional.
     * @type {string}
     * @memberof SpecGenerator
     */
    pod?: string;
    /**
     * PortBindings is a set of ports to map into the container.
     * Only available if NetNS is set to bridge, slirp, or pasta.
     * Optional.
     * @type {Array<PortMapping>}
     * @memberof SpecGenerator
     */
    portmappings?: Array<PortMapping>;
    /**
     * Privileged is whether the container is privileged.
     * Privileged does the following:
     * Adds all devices on the system to the container.
     * Adds all capabilities to the container.
     * Disables Seccomp, SELinux, and Apparmor confinement.
     * (Though SELinux can be manually re-enabled).
     * TODO: this conflicts with things.
     * TODO: this does more.
     * Optional.
     * @type {boolean}
     * @memberof SpecGenerator
     */
    privileged?: boolean;
    /**
     * ProcOpts are the options used for the proc mount.
     * @type {Array<string>}
     * @memberof SpecGenerator
     */
    procfsOpts?: Array<string>;
    /**
     * PublishExposedPorts will publish ports specified in the image to
     * random unused ports (guaranteed to be above 1024) on the host.
     * This is based on ports set in Expose below, and any ports specified
     * by the Image (if one is given).
     * Only available if NetNS is set to Bridge or Slirp.
     * Optional.
     * @type {boolean}
     * @memberof SpecGenerator
     */
    publishImagePorts?: boolean;
    /**
     * Rlimits are POSIX rlimits to apply to the container.
     * Optional.
     * @type {Array<POSIXRlimit>}
     * @memberof SpecGenerator
     */
    rLimits?: Array<POSIXRlimit>;
    /**
     * RawImageName is the user-specified and unprocessed input referring
     * to a local or a remote image.
     * Optional, but strongly encouraged to be set if Image is set.
     * @type {string}
     * @memberof SpecGenerator
     */
    rawImageName?: string;
    /**
     * ReadOnlyFilesystem indicates that everything will be mounted
     * as read-only.
     * Optional.
     * @type {boolean}
     * @memberof SpecGenerator
     */
    readOnlyFilesystem?: boolean;
    /**
     * ReadWriteTmpfs indicates that when running with a ReadOnlyFilesystem
     * mount temporary file systems.
     * Optional.
     * @type {boolean}
     * @memberof SpecGenerator
     */
    readWriteTmpfs?: boolean;
    /**
     * Remove indicates if the container should be removed once it has been started
     * and exits.
     * Optional.
     * @type {boolean}
     * @memberof SpecGenerator
     */
    remove?: boolean;
    /**
     * 
     * @type {LinuxResources}
     * @memberof SpecGenerator
     */
    resourceLimits?: LinuxResources;
    /**
     * RestartPolicy is the container's restart policy - an action which
     * will be taken when the container exits.
     * If not given, the default policy, which does nothing, will be used.
     * Optional.
     * @type {string}
     * @memberof SpecGenerator
     */
    restartPolicy?: string;
    /**
     * RestartRetries is the number of attempts that will be made to restart
     * the container.
     * Only available when RestartPolicy is set to "on-failure".
     * Optional.
     * @type {number}
     * @memberof SpecGenerator
     */
    restartTries?: number;
    /**
     * Rootfs is the path to a directory that will be used as the
     * container's root filesystem. No modification will be made to the
     * directory, it will be directly mounted into the container as root.
     * Conflicts with Image.
     * At least one of Image or Rootfs must be specified.
     * @type {string}
     * @memberof SpecGenerator
     */
    rootfs?: string;
    /**
     * RootfsMapping specifies if there are UID/GID mappings to apply to the rootfs.
     * Optional.
     * @type {string}
     * @memberof SpecGenerator
     */
    rootfsMapping?: string;
    /**
     * RootfsOverlay tells if rootfs is actually an overlay on top of base path.
     * Optional.
     * @type {boolean}
     * @memberof SpecGenerator
     */
    rootfsOverlay?: boolean;
    /**
     * RootfsPropagation is the rootfs propagation mode for the container.
     * If not set, the default of rslave will be used.
     * Optional.
     * @type {string}
     * @memberof SpecGenerator
     */
    rootfsPropagation?: string;
    /**
     * Determine how to handle the NOTIFY_SOCKET - do we participate or pass it through
     * "container" - let the OCI runtime deal with it, advertise conmon's MAINPID
     * "conmon-only" - advertise conmon's MAINPID, send READY when started, don't pass to OCI
     * "ignore" - unset NOTIFY_SOCKET
     * Optional.
     * @type {string}
     * @memberof SpecGenerator
     */
    sdnotifyMode?: string;
    /**
     * SeccompPolicy determines which seccomp profile gets applied
     * the container. valid values: empty,default,image
     * @type {string}
     * @memberof SpecGenerator
     */
    seccompPolicy?: string;
    /**
     * SeccompProfilePath is the path to a JSON file containing the
     * container's Seccomp profile.
     * If not specified, no Seccomp profile will be used.
     * Optional.
     * @type {string}
     * @memberof SpecGenerator
     */
    seccompProfilePath?: string;
    /**
     * EnvSecrets are secrets that will be set as environment variables
     * Optional.
     * @type {{ [key: string]: string; }}
     * @memberof SpecGenerator
     */
    secretEnv?: { [key: string]: string; };
    /**
     * Secrets are the secrets that will be added to the container
     * Optional.
     * @type {Array<Secret>}
     * @memberof SpecGenerator
     */
    secrets?: Array<Secret>;
    /**
     * SelinuxProcessLabel is the process label the container will use.
     * If SELinux is enabled and this is not specified, a label will be
     * automatically generated if not specified.
     * Optional.
     * @type {Array<string>}
     * @memberof SpecGenerator
     */
    selinuxOpts?: Array<string>;
    /**
     * ShmSize is the size of the tmpfs to mount in at /dev/shm, in bytes.
     * Conflicts with ShmSize if IpcNS is not private.
     * Optional.
     * @type {number}
     * @memberof SpecGenerator
     */
    shmSize?: number;
    /**
     * ShmSizeSystemd is the size of systemd-specific tmpfs mounts
     * specifically /run, /run/lock, /var/log/journal and /tmp.
     * Optional
     * @type {number}
     * @memberof SpecGenerator
     */
    shmSizeSystemd?: number;
    /**
     * 
     * @type {StartupHealthCheck}
     * @memberof SpecGenerator
     */
    startupHealthConfig?: StartupHealthCheck;
    /**
     * Stdin is whether the container will keep its STDIN open.
     * Optional.
     * @type {boolean}
     * @memberof SpecGenerator
     */
    stdin?: boolean;
    /**
     * It implements the os.Signal interface.
     * @type {number}
     * @memberof SpecGenerator
     */
    stopSignal?: number;
    /**
     * StopTimeout is a timeout between the container's stop signal being
     * sent and SIGKILL being sent.
     * If not provided, the default will be used.
     * If 0 is used, stop signal will not be sent, and SIGKILL will be sent
     * instead.
     * Optional.
     * @type {number}
     * @memberof SpecGenerator
     */
    stopTimeout?: number;
    /**
     * StorageOpts is the container's storage options
     * Optional.
     * @type {{ [key: string]: string; }}
     * @memberof SpecGenerator
     */
    storageOpts?: { [key: string]: string; };
    /**
     * Sysctl sets kernel parameters for the container
     * @type {{ [key: string]: string; }}
     * @memberof SpecGenerator
     */
    sysctl?: { [key: string]: string; };
    /**
     * Systemd is whether the container will be started in systemd mode.
     * Valid options are "true", "false", and "always".
     * "true" enables this mode only if the binary run in the container is
     * sbin/init or systemd. "always" unconditionally enables systemd mode.
     * "false" unconditionally disables systemd mode.
     * If enabled, mounts and stop signal will be modified.
     * If set to "always" or set to "true" and conditionally triggered,
     * conflicts with StopSignal.
     * If not specified, "false" will be assumed.
     * Optional.
     * @type {string}
     * @memberof SpecGenerator
     */
    systemd?: string;
    /**
     * Terminal is whether the container will create a PTY.
     * Optional.
     * @type {boolean}
     * @memberof SpecGenerator
     */
    terminal?: boolean;
    /**
     * IO read rate limit per cgroup per device, bytes per second
     * @type {{ [key: string]: LinuxThrottleDevice; }}
     * @memberof SpecGenerator
     */
    throttleReadBpsDevice?: { [key: string]: LinuxThrottleDevice; };
    /**
     * IO read rate limit per cgroup per device, IO per second
     * @type {{ [key: string]: LinuxThrottleDevice; }}
     * @memberof SpecGenerator
     */
    throttleReadIOPSDevice?: { [key: string]: LinuxThrottleDevice; };
    /**
     * IO write rate limit per cgroup per device, bytes per second
     * @type {{ [key: string]: LinuxThrottleDevice; }}
     * @memberof SpecGenerator
     */
    throttleWriteBpsDevice?: { [key: string]: LinuxThrottleDevice; };
    /**
     * IO write rate limit per cgroup per device, IO per second
     * @type {{ [key: string]: LinuxThrottleDevice; }}
     * @memberof SpecGenerator
     */
    throttleWriteIOPSDevice?: { [key: string]: LinuxThrottleDevice; };
    /**
     * Timeout is a maximum time in seconds the container will run before
     * main process is sent SIGKILL.
     * If 0 is used, signal will not be sent. Container can run indefinitely
     * if they do not stop after the default termination signal.
     * Optional.
     * @type {number}
     * @memberof SpecGenerator
     */
    timeout?: number;
    /**
     * Timezone is the timezone inside the container.
     * Local means it has the same timezone as the host machine
     * Optional.
     * @type {string}
     * @memberof SpecGenerator
     */
    timezone?: string;
    /**
     * Umask is the umask the init process of the container will be run with.
     * @type {string}
     * @memberof SpecGenerator
     */
    umask?: string;
    /**
     * CgroupConf are key-value options passed into the container runtime
     * that are used to configure cgroup v2.
     * Optional.
     * @type {{ [key: string]: string; }}
     * @memberof SpecGenerator
     */
    unified?: { [key: string]: string; };
    /**
     * Unmask a path in the container. Some paths are masked by default,
     * preventing them from being accessed within the container; this undoes
     * that masking. If ALL is passed, all paths will be unmasked.
     * Optional.
     * @type {Array<string>}
     * @memberof SpecGenerator
     */
    unmask?: Array<string>;
    /**
     * UnsetEnv unsets the specified default environment variables from the image or from buildin or containers.conf
     * Optional.
     * @type {Array<string>}
     * @memberof SpecGenerator
     */
    unsetenv?: Array<string>;
    /**
     * UnsetEnvAll unsetall default environment variables from the image or from buildin or containers.conf
     * UnsetEnvAll unsets all default environment variables from the image or from buildin
     * Optional.
     * @type {boolean}
     * @memberof SpecGenerator
     */
    unsetenvall?: boolean;
    /**
     * UseImageHosts indicates that /etc/hosts should not be managed by
     * Podman, and instead sourced from the image.
     * Conflicts with HostAdd.
     * Optional.
     * @type {boolean}
     * @memberof SpecGenerator
     */
    useImageHosts?: boolean;
    /**
     * UseImageResolvConf indicates that resolv.conf should not be managed
     * by Podman, but instead sourced from the image.
     * Conflicts with DNSServer, DNSSearch, DNSOption.
     * Optional.
     * @type {boolean}
     * @memberof SpecGenerator
     */
    useImageResolveConf?: boolean;
    /**
     * User is the user the container will be run as.
     * Can be given as a UID or a username; if a username, it will be
     * resolved within the container, using the container's /etc/passwd.
     * If unset, the container will be run as root.
     * Optional.
     * @type {string}
     * @memberof SpecGenerator
     */
    user?: string;
    /**
     * 
     * @type {Namespace}
     * @memberof SpecGenerator
     */
    userns?: Namespace;
    /**
     * 
     * @type {Namespace}
     * @memberof SpecGenerator
     */
    utsns?: Namespace;
    /**
     * Volatile specifies whether the container storage can be optimized
     * at the cost of not syncing all the dirty files in memory.
     * Optional.
     * @type {boolean}
     * @memberof SpecGenerator
     */
    _volatile?: boolean;
    /**
     * Volumes are named volumes that will be added to the container.
     * These will supersede Image Volumes and VolumesFrom volumes where
     * there are conflicts.
     * Optional.
     * @type {Array<NamedVolume>}
     * @memberof SpecGenerator
     */
    volumes?: Array<NamedVolume>;
    /**
     * VolumesFrom is a set of containers whose volumes will be added to
     * this container. The name or ID of the container must be provided, and
     * may optionally be followed by a : and then one or more
     * comma-separated options. Valid options are 'ro', 'rw', and 'z'.
     * Options will be used for all volumes sourced from the container.
     * Optional.
     * @type {Array<string>}
     * @memberof SpecGenerator
     */
    volumesFrom?: Array<string>;
    /**
     * Weight per cgroup per device, can override BlkioWeight
     * @type {{ [key: string]: LinuxWeightDevice; }}
     * @memberof SpecGenerator
     */
    weightDevice?: { [key: string]: LinuxWeightDevice; };
    /**
     * WorkDir is the container's working directory.
     * If unset, the default, /, will be used.
     * Optional.
     * @type {string}
     * @memberof SpecGenerator
     */
    workDir?: string;
}

/**
 * Check if a given object implements the SpecGenerator interface.
 */
export function instanceOfSpecGenerator(value: object): value is SpecGenerator {
    return true;
}

export function SpecGeneratorFromJSON(json: any): SpecGenerator {
    return SpecGeneratorFromJSONTyped(json, false);
}

export function SpecGeneratorFromJSONTyped(json: any, ignoreDiscriminator: boolean): SpecGenerator {
    if (json == null) {
        return json;
    }
    return {
        
        'networks': json['Networks'] == null ? undefined : (mapValues(json['Networks'], PerNetworkOptionsFromJSON)),
        'annotations': json['annotations'] == null ? undefined : json['annotations'],
        'apparmorProfile': json['apparmor_profile'] == null ? undefined : json['apparmor_profile'],
        'baseHostsFile': json['base_hosts_file'] == null ? undefined : json['base_hosts_file'],
        'capAdd': json['cap_add'] == null ? undefined : json['cap_add'],
        'capDrop': json['cap_drop'] == null ? undefined : json['cap_drop'],
        'cgroupParent': json['cgroup_parent'] == null ? undefined : json['cgroup_parent'],
        'cgroupns': json['cgroupns'] == null ? undefined : NamespaceFromJSON(json['cgroupns']),
        'cgroupsMode': json['cgroups_mode'] == null ? undefined : json['cgroups_mode'],
        'chrootDirectories': json['chroot_directories'] == null ? undefined : json['chroot_directories'],
        'cniNetworks': json['cni_networks'] == null ? undefined : json['cni_networks'],
        'command': json['command'] == null ? undefined : json['command'],
        'conmonPidFile': json['conmon_pid_file'] == null ? undefined : json['conmon_pid_file'],
        'containerCreateCommand': json['containerCreateCommand'] == null ? undefined : json['containerCreateCommand'],
        'createWorkingDir': json['create_working_dir'] == null ? undefined : json['create_working_dir'],
        'dependencyContainers': json['dependencyContainers'] == null ? undefined : json['dependencyContainers'],
        'deviceCgroupRule': json['device_cgroup_rule'] == null ? undefined : ((json['device_cgroup_rule'] as Array<any>).map(LinuxDeviceCgroupFromJSON)),
        'devices': json['devices'] == null ? undefined : ((json['devices'] as Array<any>).map(LinuxDeviceFromJSON)),
        'devicesFrom': json['devices_from'] == null ? undefined : json['devices_from'],
        'dnsOption': json['dns_option'] == null ? undefined : json['dns_option'],
        'dnsSearch': json['dns_search'] == null ? undefined : json['dns_search'],
        'dnsServer': json['dns_server'] == null ? undefined : json['dns_server'],
        'entrypoint': json['entrypoint'] == null ? undefined : json['entrypoint'],
        'env': json['env'] == null ? undefined : json['env'],
        'envHost': json['env_host'] == null ? undefined : json['env_host'],
        'envmerge': json['envmerge'] == null ? undefined : json['envmerge'],
        'expose': json['expose'] == null ? undefined : json['expose'],
        'groupEntry': json['group_entry'] == null ? undefined : json['group_entry'],
        'groups': json['groups'] == null ? undefined : json['groups'],
        'healthCheckOnFailureAction': json['health_check_on_failure_action'] == null ? undefined : json['health_check_on_failure_action'],
        'healthconfig': json['healthconfig'] == null ? undefined : Schema2HealthConfigFromJSON(json['healthconfig']),
        'hostDeviceList': json['host_device_list'] == null ? undefined : ((json['host_device_list'] as Array<any>).map(LinuxDeviceFromJSON)),
        'hostadd': json['hostadd'] == null ? undefined : json['hostadd'],
        'hostname': json['hostname'] == null ? undefined : json['hostname'],
        'hostusers': json['hostusers'] == null ? undefined : json['hostusers'],
        'httpproxy': json['httpproxy'] == null ? undefined : json['httpproxy'],
        'idmappings': json['idmappings'] == null ? undefined : IDMappingOptionsFromJSON(json['idmappings']),
        'image': json['image'] == null ? undefined : json['image'],
        'imageArch': json['image_arch'] == null ? undefined : json['image_arch'],
        'imageOs': json['image_os'] == null ? undefined : json['image_os'],
        'imageVariant': json['image_variant'] == null ? undefined : json['image_variant'],
        'imageVolumeMode': json['image_volume_mode'] == null ? undefined : json['image_volume_mode'],
        'imageVolumes': json['image_volumes'] == null ? undefined : ((json['image_volumes'] as Array<any>).map(ImageVolumeFromJSON)),
        'init': json['init'] == null ? undefined : json['init'],
        'initContainerType': json['init_container_type'] == null ? undefined : json['init_container_type'],
        'initPath': json['init_path'] == null ? undefined : json['init_path'],
        'intelRdt': json['intelRdt'] == null ? undefined : LinuxIntelRdtFromJSON(json['intelRdt']),
        'ipcns': json['ipcns'] == null ? undefined : NamespaceFromJSON(json['ipcns']),
        'labelNested': json['label_nested'] == null ? undefined : json['label_nested'],
        'labels': json['labels'] == null ? undefined : json['labels'],
        'logConfiguration': json['log_configuration'] == null ? undefined : LogConfigLibpodFromJSON(json['log_configuration']),
        'managePassword': json['manage_password'] == null ? undefined : json['manage_password'],
        'mask': json['mask'] == null ? undefined : json['mask'],
        'mounts': json['mounts'] == null ? undefined : ((json['mounts'] as Array<any>).map(MountFromJSON)),
        'name': json['name'] == null ? undefined : json['name'],
        'netns': json['netns'] == null ? undefined : NamespaceFromJSON(json['netns']),
        'networkOptions': json['network_options'] == null ? undefined : json['network_options'],
        'noNewPrivileges': json['no_new_privileges'] == null ? undefined : json['no_new_privileges'],
        'ociRuntime': json['oci_runtime'] == null ? undefined : json['oci_runtime'],
        'oomScoreAdj': json['oom_score_adj'] == null ? undefined : json['oom_score_adj'],
        'overlayVolumes': json['overlay_volumes'] == null ? undefined : ((json['overlay_volumes'] as Array<any>).map(OverlayVolumeFromJSON)),
        'passwdEntry': json['passwd_entry'] == null ? undefined : json['passwd_entry'],
        'personality': json['personality'] == null ? undefined : LinuxPersonalityFromJSON(json['personality']),
        'pidns': json['pidns'] == null ? undefined : NamespaceFromJSON(json['pidns']),
        'pod': json['pod'] == null ? undefined : json['pod'],
        'portmappings': json['portmappings'] == null ? undefined : ((json['portmappings'] as Array<any>).map(PortMappingFromJSON)),
        'privileged': json['privileged'] == null ? undefined : json['privileged'],
        'procfsOpts': json['procfs_opts'] == null ? undefined : json['procfs_opts'],
        'publishImagePorts': json['publish_image_ports'] == null ? undefined : json['publish_image_ports'],
        'rLimits': json['r_limits'] == null ? undefined : ((json['r_limits'] as Array<any>).map(POSIXRlimitFromJSON)),
        'rawImageName': json['raw_image_name'] == null ? undefined : json['raw_image_name'],
        'readOnlyFilesystem': json['read_only_filesystem'] == null ? undefined : json['read_only_filesystem'],
        'readWriteTmpfs': json['read_write_tmpfs'] == null ? undefined : json['read_write_tmpfs'],
        'remove': json['remove'] == null ? undefined : json['remove'],
        'resourceLimits': json['resource_limits'] == null ? undefined : LinuxResourcesFromJSON(json['resource_limits']),
        'restartPolicy': json['restart_policy'] == null ? undefined : json['restart_policy'],
        'restartTries': json['restart_tries'] == null ? undefined : json['restart_tries'],
        'rootfs': json['rootfs'] == null ? undefined : json['rootfs'],
        'rootfsMapping': json['rootfs_mapping'] == null ? undefined : json['rootfs_mapping'],
        'rootfsOverlay': json['rootfs_overlay'] == null ? undefined : json['rootfs_overlay'],
        'rootfsPropagation': json['rootfs_propagation'] == null ? undefined : json['rootfs_propagation'],
        'sdnotifyMode': json['sdnotifyMode'] == null ? undefined : json['sdnotifyMode'],
        'seccompPolicy': json['seccomp_policy'] == null ? undefined : json['seccomp_policy'],
        'seccompProfilePath': json['seccomp_profile_path'] == null ? undefined : json['seccomp_profile_path'],
        'secretEnv': json['secret_env'] == null ? undefined : json['secret_env'],
        'secrets': json['secrets'] == null ? undefined : ((json['secrets'] as Array<any>).map(SecretFromJSON)),
        'selinuxOpts': json['selinux_opts'] == null ? undefined : json['selinux_opts'],
        'shmSize': json['shm_size'] == null ? undefined : json['shm_size'],
        'shmSizeSystemd': json['shm_size_systemd'] == null ? undefined : json['shm_size_systemd'],
        'startupHealthConfig': json['startupHealthConfig'] == null ? undefined : StartupHealthCheckFromJSON(json['startupHealthConfig']),
        'stdin': json['stdin'] == null ? undefined : json['stdin'],
        'stopSignal': json['stop_signal'] == null ? undefined : json['stop_signal'],
        'stopTimeout': json['stop_timeout'] == null ? undefined : json['stop_timeout'],
        'storageOpts': json['storage_opts'] == null ? undefined : json['storage_opts'],
        'sysctl': json['sysctl'] == null ? undefined : json['sysctl'],
        'systemd': json['systemd'] == null ? undefined : json['systemd'],
        'terminal': json['terminal'] == null ? undefined : json['terminal'],
        'throttleReadBpsDevice': json['throttleReadBpsDevice'] == null ? undefined : (mapValues(json['throttleReadBpsDevice'], LinuxThrottleDeviceFromJSON)),
        'throttleReadIOPSDevice': json['throttleReadIOPSDevice'] == null ? undefined : (mapValues(json['throttleReadIOPSDevice'], LinuxThrottleDeviceFromJSON)),
        'throttleWriteBpsDevice': json['throttleWriteBpsDevice'] == null ? undefined : (mapValues(json['throttleWriteBpsDevice'], LinuxThrottleDeviceFromJSON)),
        'throttleWriteIOPSDevice': json['throttleWriteIOPSDevice'] == null ? undefined : (mapValues(json['throttleWriteIOPSDevice'], LinuxThrottleDeviceFromJSON)),
        'timeout': json['timeout'] == null ? undefined : json['timeout'],
        'timezone': json['timezone'] == null ? undefined : json['timezone'],
        'umask': json['umask'] == null ? undefined : json['umask'],
        'unified': json['unified'] == null ? undefined : json['unified'],
        'unmask': json['unmask'] == null ? undefined : json['unmask'],
        'unsetenv': json['unsetenv'] == null ? undefined : json['unsetenv'],
        'unsetenvall': json['unsetenvall'] == null ? undefined : json['unsetenvall'],
        'useImageHosts': json['use_image_hosts'] == null ? undefined : json['use_image_hosts'],
        'useImageResolveConf': json['use_image_resolve_conf'] == null ? undefined : json['use_image_resolve_conf'],
        'user': json['user'] == null ? undefined : json['user'],
        'userns': json['userns'] == null ? undefined : NamespaceFromJSON(json['userns']),
        'utsns': json['utsns'] == null ? undefined : NamespaceFromJSON(json['utsns']),
        '_volatile': json['volatile'] == null ? undefined : json['volatile'],
        'volumes': json['volumes'] == null ? undefined : ((json['volumes'] as Array<any>).map(NamedVolumeFromJSON)),
        'volumesFrom': json['volumes_from'] == null ? undefined : json['volumes_from'],
        'weightDevice': json['weightDevice'] == null ? undefined : (mapValues(json['weightDevice'], LinuxWeightDeviceFromJSON)),
        'workDir': json['work_dir'] == null ? undefined : json['work_dir'],
    };
}

export function SpecGeneratorToJSON(value?: SpecGenerator | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'Networks': value['networks'] == null ? undefined : (mapValues(value['networks'], PerNetworkOptionsToJSON)),
        'annotations': value['annotations'],
        'apparmor_profile': value['apparmorProfile'],
        'base_hosts_file': value['baseHostsFile'],
        'cap_add': value['capAdd'],
        'cap_drop': value['capDrop'],
        'cgroup_parent': value['cgroupParent'],
        'cgroupns': NamespaceToJSON(value['cgroupns']),
        'cgroups_mode': value['cgroupsMode'],
        'chroot_directories': value['chrootDirectories'],
        'cni_networks': value['cniNetworks'],
        'command': value['command'],
        'conmon_pid_file': value['conmonPidFile'],
        'containerCreateCommand': value['containerCreateCommand'],
        'create_working_dir': value['createWorkingDir'],
        'dependencyContainers': value['dependencyContainers'],
        'device_cgroup_rule': value['deviceCgroupRule'] == null ? undefined : ((value['deviceCgroupRule'] as Array<any>).map(LinuxDeviceCgroupToJSON)),
        'devices': value['devices'] == null ? undefined : ((value['devices'] as Array<any>).map(LinuxDeviceToJSON)),
        'devices_from': value['devicesFrom'],
        'dns_option': value['dnsOption'],
        'dns_search': value['dnsSearch'],
        'dns_server': value['dnsServer'],
        'entrypoint': value['entrypoint'],
        'env': value['env'],
        'env_host': value['envHost'],
        'envmerge': value['envmerge'],
        'expose': value['expose'],
        'group_entry': value['groupEntry'],
        'groups': value['groups'],
        'health_check_on_failure_action': value['healthCheckOnFailureAction'],
        'healthconfig': Schema2HealthConfigToJSON(value['healthconfig']),
        'host_device_list': value['hostDeviceList'] == null ? undefined : ((value['hostDeviceList'] as Array<any>).map(LinuxDeviceToJSON)),
        'hostadd': value['hostadd'],
        'hostname': value['hostname'],
        'hostusers': value['hostusers'],
        'httpproxy': value['httpproxy'],
        'idmappings': IDMappingOptionsToJSON(value['idmappings']),
        'image': value['image'],
        'image_arch': value['imageArch'],
        'image_os': value['imageOs'],
        'image_variant': value['imageVariant'],
        'image_volume_mode': value['imageVolumeMode'],
        'image_volumes': value['imageVolumes'] == null ? undefined : ((value['imageVolumes'] as Array<any>).map(ImageVolumeToJSON)),
        'init': value['init'],
        'init_container_type': value['initContainerType'],
        'init_path': value['initPath'],
        'intelRdt': LinuxIntelRdtToJSON(value['intelRdt']),
        'ipcns': NamespaceToJSON(value['ipcns']),
        'label_nested': value['labelNested'],
        'labels': value['labels'],
        'log_configuration': LogConfigLibpodToJSON(value['logConfiguration']),
        'manage_password': value['managePassword'],
        'mask': value['mask'],
        'mounts': value['mounts'] == null ? undefined : ((value['mounts'] as Array<any>).map(MountToJSON)),
        'name': value['name'],
        'netns': NamespaceToJSON(value['netns']),
        'network_options': value['networkOptions'],
        'no_new_privileges': value['noNewPrivileges'],
        'oci_runtime': value['ociRuntime'],
        'oom_score_adj': value['oomScoreAdj'],
        'overlay_volumes': value['overlayVolumes'] == null ? undefined : ((value['overlayVolumes'] as Array<any>).map(OverlayVolumeToJSON)),
        'passwd_entry': value['passwdEntry'],
        'personality': LinuxPersonalityToJSON(value['personality']),
        'pidns': NamespaceToJSON(value['pidns']),
        'pod': value['pod'],
        'portmappings': value['portmappings'] == null ? undefined : ((value['portmappings'] as Array<any>).map(PortMappingToJSON)),
        'privileged': value['privileged'],
        'procfs_opts': value['procfsOpts'],
        'publish_image_ports': value['publishImagePorts'],
        'r_limits': value['rLimits'] == null ? undefined : ((value['rLimits'] as Array<any>).map(POSIXRlimitToJSON)),
        'raw_image_name': value['rawImageName'],
        'read_only_filesystem': value['readOnlyFilesystem'],
        'read_write_tmpfs': value['readWriteTmpfs'],
        'remove': value['remove'],
        'resource_limits': LinuxResourcesToJSON(value['resourceLimits']),
        'restart_policy': value['restartPolicy'],
        'restart_tries': value['restartTries'],
        'rootfs': value['rootfs'],
        'rootfs_mapping': value['rootfsMapping'],
        'rootfs_overlay': value['rootfsOverlay'],
        'rootfs_propagation': value['rootfsPropagation'],
        'sdnotifyMode': value['sdnotifyMode'],
        'seccomp_policy': value['seccompPolicy'],
        'seccomp_profile_path': value['seccompProfilePath'],
        'secret_env': value['secretEnv'],
        'secrets': value['secrets'] == null ? undefined : ((value['secrets'] as Array<any>).map(SecretToJSON)),
        'selinux_opts': value['selinuxOpts'],
        'shm_size': value['shmSize'],
        'shm_size_systemd': value['shmSizeSystemd'],
        'startupHealthConfig': StartupHealthCheckToJSON(value['startupHealthConfig']),
        'stdin': value['stdin'],
        'stop_signal': value['stopSignal'],
        'stop_timeout': value['stopTimeout'],
        'storage_opts': value['storageOpts'],
        'sysctl': value['sysctl'],
        'systemd': value['systemd'],
        'terminal': value['terminal'],
        'throttleReadBpsDevice': value['throttleReadBpsDevice'] == null ? undefined : (mapValues(value['throttleReadBpsDevice'], LinuxThrottleDeviceToJSON)),
        'throttleReadIOPSDevice': value['throttleReadIOPSDevice'] == null ? undefined : (mapValues(value['throttleReadIOPSDevice'], LinuxThrottleDeviceToJSON)),
        'throttleWriteBpsDevice': value['throttleWriteBpsDevice'] == null ? undefined : (mapValues(value['throttleWriteBpsDevice'], LinuxThrottleDeviceToJSON)),
        'throttleWriteIOPSDevice': value['throttleWriteIOPSDevice'] == null ? undefined : (mapValues(value['throttleWriteIOPSDevice'], LinuxThrottleDeviceToJSON)),
        'timeout': value['timeout'],
        'timezone': value['timezone'],
        'umask': value['umask'],
        'unified': value['unified'],
        'unmask': value['unmask'],
        'unsetenv': value['unsetenv'],
        'unsetenvall': value['unsetenvall'],
        'use_image_hosts': value['useImageHosts'],
        'use_image_resolve_conf': value['useImageResolveConf'],
        'user': value['user'],
        'userns': NamespaceToJSON(value['userns']),
        'utsns': NamespaceToJSON(value['utsns']),
        'volatile': value['_volatile'],
        'volumes': value['volumes'] == null ? undefined : ((value['volumes'] as Array<any>).map(NamedVolumeToJSON)),
        'volumes_from': value['volumesFrom'],
        'weightDevice': value['weightDevice'] == null ? undefined : (mapValues(value['weightDevice'], LinuxWeightDeviceToJSON)),
        'work_dir': value['workDir'],
    };
}

