/* tslint:disable */
/* eslint-disable */
/**
 * supports a RESTful API for the Libpod library
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-system-service(1) for more information.  Quick Examples:  \'podman info\'  curl --unix-socket /run/podman/podman.sock http://d/v5.0.0/libpod/info  \'podman pull quay.io/containers/podman\'  curl -XPOST --unix-socket /run/podman/podman.sock -v \'http://d/v5.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman\'  \'podman list images\'  curl --unix-socket /run/podman/podman.sock -v \'http://d/v5.0.0/libpod/images/json\' | jq
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: podman@lists.podman.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { UsageData } from './UsageData';
import {
    UsageDataFromJSON,
    UsageDataFromJSONTyped,
    UsageDataToJSON,
} from './UsageData';
import type { ClusterVolume } from './ClusterVolume';
import {
    ClusterVolumeFromJSON,
    ClusterVolumeFromJSONTyped,
    ClusterVolumeToJSON,
} from './ClusterVolume';

/**
 * Volume volume
 * @export
 * @interface Volume
 */
export interface Volume {
    /**
     * 
     * @type {ClusterVolume}
     * @memberof Volume
     */
    clusterVolume?: ClusterVolume;
    /**
     * Date/Time the volume was created.
     * @type {string}
     * @memberof Volume
     */
    createdAt?: string;
    /**
     * Name of the volume driver used by the volume.
     * @type {string}
     * @memberof Volume
     */
    driver: string;
    /**
     * User-defined key/value metadata.
     * @type {{ [key: string]: string; }}
     * @memberof Volume
     */
    labels: { [key: string]: string; };
    /**
     * Mount path of the volume on the host.
     * @type {string}
     * @memberof Volume
     */
    mountpoint: string;
    /**
     * Name of the volume.
     * @type {string}
     * @memberof Volume
     */
    name: string;
    /**
     * The driver specific options used when creating the volume.
     * @type {{ [key: string]: string; }}
     * @memberof Volume
     */
    options: { [key: string]: string; };
    /**
     * The level at which the volume exists. Either `global` for cluster-wide,
     * or `local` for machine level.
     * @type {string}
     * @memberof Volume
     */
    scope: string;
    /**
     * Low-level details about the volume, provided by the volume driver.
     * Details are returned as a map with key/value pairs:
     * `{"key":"value","key2":"value2"}`.
     * 
     * The `Status` field is optional, and is omitted if the volume driver
     * does not support this feature.
     * @type {{ [key: string]: object; }}
     * @memberof Volume
     */
    status?: { [key: string]: object; };
    /**
     * 
     * @type {UsageData}
     * @memberof Volume
     */
    usageData?: UsageData;
}

/**
 * Check if a given object implements the Volume interface.
 */
export function instanceOfVolume(value: object): value is Volume {
    if (!('driver' in value) || value['driver'] === undefined) return false;
    if (!('labels' in value) || value['labels'] === undefined) return false;
    if (!('mountpoint' in value) || value['mountpoint'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('options' in value) || value['options'] === undefined) return false;
    if (!('scope' in value) || value['scope'] === undefined) return false;
    return true;
}

export function VolumeFromJSON(json: any): Volume {
    return VolumeFromJSONTyped(json, false);
}

export function VolumeFromJSONTyped(json: any, ignoreDiscriminator: boolean): Volume {
    if (json == null) {
        return json;
    }
    return {
        
        'clusterVolume': json['ClusterVolume'] == null ? undefined : ClusterVolumeFromJSON(json['ClusterVolume']),
        'createdAt': json['CreatedAt'] == null ? undefined : json['CreatedAt'],
        'driver': json['Driver'],
        'labels': json['Labels'],
        'mountpoint': json['Mountpoint'],
        'name': json['Name'],
        'options': json['Options'],
        'scope': json['Scope'],
        'status': json['Status'] == null ? undefined : json['Status'],
        'usageData': json['UsageData'] == null ? undefined : UsageDataFromJSON(json['UsageData']),
    };
}

export function VolumeToJSON(value?: Volume | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'ClusterVolume': ClusterVolumeToJSON(value['clusterVolume']),
        'CreatedAt': value['createdAt'],
        'Driver': value['driver'],
        'Labels': value['labels'],
        'Mountpoint': value['mountpoint'],
        'Name': value['name'],
        'Options': value['options'],
        'Scope': value['scope'],
        'Status': value['status'],
        'UsageData': UsageDataToJSON(value['usageData']),
    };
}

