/* tslint:disable */
/* eslint-disable */
/**
 * supports a RESTful API for the Libpod library
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-system-service(1) for more information.  Quick Examples:  \'podman info\'  curl --unix-socket /run/podman/podman.sock http://d/v5.0.0/libpod/info  \'podman pull quay.io/containers/podman\'  curl -XPOST --unix-socket /run/podman/podman.sock -v \'http://d/v5.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman\'  \'podman list images\'  curl --unix-socket /run/podman/podman.sock -v \'http://d/v5.0.0/libpod/images/json\' | jq
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: podman@lists.podman.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { InspectSecret } from './InspectSecret';
import {
    InspectSecretFromJSON,
    InspectSecretFromJSONTyped,
    InspectSecretToJSON,
} from './InspectSecret';
import type { Schema2HealthConfig } from './Schema2HealthConfig';
import {
    Schema2HealthConfigFromJSON,
    Schema2HealthConfigFromJSONTyped,
    Schema2HealthConfigToJSON,
} from './Schema2HealthConfig';

/**
 * InspectContainerConfig holds further data about how a container was initially
 * configured.
 * @export
 * @interface InspectContainerConfig
 */
export interface InspectContainerConfig {
    /**
     * Container annotations
     * @type {{ [key: string]: string; }}
     * @memberof InspectContainerConfig
     */
    annotations?: { [key: string]: string; };
    /**
     * Unused, at present
     * @type {boolean}
     * @memberof InspectContainerConfig
     */
    attachStderr?: boolean;
    /**
     * Unused, at present
     * @type {boolean}
     * @memberof InspectContainerConfig
     */
    attachStdin?: boolean;
    /**
     * Unused, at present
     * @type {boolean}
     * @memberof InspectContainerConfig
     */
    attachStdout?: boolean;
    /**
     * ChrootDirs is an additional set of directories that need to be
     * treated as root directories. Standard bind mounts will be mounted
     * into paths relative to these directories.
     * @type {Array<string>}
     * @memberof InspectContainerConfig
     */
    chrootDirs?: Array<string>;
    /**
     * Container command
     * @type {Array<string>}
     * @memberof InspectContainerConfig
     */
    cmd?: Array<string>;
    /**
     * CreateCommand is the full command plus arguments of the process the
     * container has been created with.
     * @type {Array<string>}
     * @memberof InspectContainerConfig
     */
    createCommand?: Array<string>;
    /**
     * Container domain name - unused at present
     * @type {string}
     * @memberof InspectContainerConfig
     */
    domainname?: string;
    /**
     * Container entrypoint
     * @type {Array<string>}
     * @memberof InspectContainerConfig
     */
    entrypoint?: Array<string>;
    /**
     * Container environment variables
     * @type {Array<string>}
     * @memberof InspectContainerConfig
     */
    env?: Array<string>;
    /**
     * 
     * @type {Schema2HealthConfig}
     * @memberof InspectContainerConfig
     */
    healthcheck?: Schema2HealthConfig;
    /**
     * HealthcheckOnFailureAction defines an action to take once the container turns unhealthy.
     * @type {string}
     * @memberof InspectContainerConfig
     */
    healthcheckOnFailureAction?: string;
    /**
     * Container hostname
     * @type {string}
     * @memberof InspectContainerConfig
     */
    hostname?: string;
    /**
     * Container image
     * @type {string}
     * @memberof InspectContainerConfig
     */
    image?: string;
    /**
     * Container labels
     * @type {{ [key: string]: string; }}
     * @memberof InspectContainerConfig
     */
    labels?: { [key: string]: string; };
    /**
     * On-build arguments - presently unused. More of Buildah's domain.
     * @type {string}
     * @memberof InspectContainerConfig
     */
    onBuild?: string;
    /**
     * Whether the container leaves STDIN open
     * @type {boolean}
     * @memberof InspectContainerConfig
     */
    openStdin?: boolean;
    /**
     * Passwd determines whether or not podman can add entries to /etc/passwd and /etc/group
     * @type {boolean}
     * @memberof InspectContainerConfig
     */
    passwd?: boolean;
    /**
     * Secrets are the secrets mounted in the container
     * @type {Array<InspectSecret>}
     * @memberof InspectContainerConfig
     */
    secrets?: Array<InspectSecret>;
    /**
     * Whether STDIN is only left open once.
     * Presently not supported by Podman, unused.
     * @type {boolean}
     * @memberof InspectContainerConfig
     */
    stdinOnce?: boolean;
    /**
     * Container stop signal
     * @type {string}
     * @memberof InspectContainerConfig
     */
    stopSignal?: string;
    /**
     * StopTimeout is time before container is stopped when calling stop
     * @type {number}
     * @memberof InspectContainerConfig
     */
    stopTimeout?: number;
    /**
     * SystemdMode is whether the container is running in systemd mode. In
     * systemd mode, the container configuration is customized to optimize
     * running systemd in the container.
     * @type {boolean}
     * @memberof InspectContainerConfig
     */
    systemdMode?: boolean;
    /**
     * Timeout is time before container is killed by conmon
     * @type {number}
     * @memberof InspectContainerConfig
     */
    timeout?: number;
    /**
     * Timezone is the timezone inside the container.
     * Local means it has the same timezone as the host machine
     * @type {string}
     * @memberof InspectContainerConfig
     */
    timezone?: string;
    /**
     * Whether the container creates a TTY
     * @type {boolean}
     * @memberof InspectContainerConfig
     */
    tty?: boolean;
    /**
     * Umask is the umask inside the container.
     * @type {string}
     * @memberof InspectContainerConfig
     */
    umask?: string;
    /**
     * User the container was launched with
     * @type {string}
     * @memberof InspectContainerConfig
     */
    user?: string;
    /**
     * Unused, at present. I've never seen this field populated.
     * @type {{ [key: string]: object; }}
     * @memberof InspectContainerConfig
     */
    volumes?: { [key: string]: object; };
    /**
     * Container working directory
     * @type {string}
     * @memberof InspectContainerConfig
     */
    workingDir?: string;
    /**
     * SdNotifyMode is the sd-notify mode of the container.
     * @type {string}
     * @memberof InspectContainerConfig
     */
    sdNotifyMode?: string;
    /**
     * SdNotifySocket is the NOTIFY_SOCKET in use by/configured for the container.
     * @type {string}
     * @memberof InspectContainerConfig
     */
    sdNotifySocket?: string;
}

/**
 * Check if a given object implements the InspectContainerConfig interface.
 */
export function instanceOfInspectContainerConfig(value: object): value is InspectContainerConfig {
    return true;
}

export function InspectContainerConfigFromJSON(json: any): InspectContainerConfig {
    return InspectContainerConfigFromJSONTyped(json, false);
}

export function InspectContainerConfigFromJSONTyped(json: any, ignoreDiscriminator: boolean): InspectContainerConfig {
    if (json == null) {
        return json;
    }
    return {
        
        'annotations': json['Annotations'] == null ? undefined : json['Annotations'],
        'attachStderr': json['AttachStderr'] == null ? undefined : json['AttachStderr'],
        'attachStdin': json['AttachStdin'] == null ? undefined : json['AttachStdin'],
        'attachStdout': json['AttachStdout'] == null ? undefined : json['AttachStdout'],
        'chrootDirs': json['ChrootDirs'] == null ? undefined : json['ChrootDirs'],
        'cmd': json['Cmd'] == null ? undefined : json['Cmd'],
        'createCommand': json['CreateCommand'] == null ? undefined : json['CreateCommand'],
        'domainname': json['Domainname'] == null ? undefined : json['Domainname'],
        'entrypoint': json['Entrypoint'] == null ? undefined : json['Entrypoint'],
        'env': json['Env'] == null ? undefined : json['Env'],
        'healthcheck': json['Healthcheck'] == null ? undefined : Schema2HealthConfigFromJSON(json['Healthcheck']),
        'healthcheckOnFailureAction': json['HealthcheckOnFailureAction'] == null ? undefined : json['HealthcheckOnFailureAction'],
        'hostname': json['Hostname'] == null ? undefined : json['Hostname'],
        'image': json['Image'] == null ? undefined : json['Image'],
        'labels': json['Labels'] == null ? undefined : json['Labels'],
        'onBuild': json['OnBuild'] == null ? undefined : json['OnBuild'],
        'openStdin': json['OpenStdin'] == null ? undefined : json['OpenStdin'],
        'passwd': json['Passwd'] == null ? undefined : json['Passwd'],
        'secrets': json['Secrets'] == null ? undefined : ((json['Secrets'] as Array<any>).map(InspectSecretFromJSON)),
        'stdinOnce': json['StdinOnce'] == null ? undefined : json['StdinOnce'],
        'stopSignal': json['StopSignal'] == null ? undefined : json['StopSignal'],
        'stopTimeout': json['StopTimeout'] == null ? undefined : json['StopTimeout'],
        'systemdMode': json['SystemdMode'] == null ? undefined : json['SystemdMode'],
        'timeout': json['Timeout'] == null ? undefined : json['Timeout'],
        'timezone': json['Timezone'] == null ? undefined : json['Timezone'],
        'tty': json['Tty'] == null ? undefined : json['Tty'],
        'umask': json['Umask'] == null ? undefined : json['Umask'],
        'user': json['User'] == null ? undefined : json['User'],
        'volumes': json['Volumes'] == null ? undefined : json['Volumes'],
        'workingDir': json['WorkingDir'] == null ? undefined : json['WorkingDir'],
        'sdNotifyMode': json['sdNotifyMode'] == null ? undefined : json['sdNotifyMode'],
        'sdNotifySocket': json['sdNotifySocket'] == null ? undefined : json['sdNotifySocket'],
    };
}

export function InspectContainerConfigToJSON(value?: InspectContainerConfig | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'Annotations': value['annotations'],
        'AttachStderr': value['attachStderr'],
        'AttachStdin': value['attachStdin'],
        'AttachStdout': value['attachStdout'],
        'ChrootDirs': value['chrootDirs'],
        'Cmd': value['cmd'],
        'CreateCommand': value['createCommand'],
        'Domainname': value['domainname'],
        'Entrypoint': value['entrypoint'],
        'Env': value['env'],
        'Healthcheck': Schema2HealthConfigToJSON(value['healthcheck']),
        'HealthcheckOnFailureAction': value['healthcheckOnFailureAction'],
        'Hostname': value['hostname'],
        'Image': value['image'],
        'Labels': value['labels'],
        'OnBuild': value['onBuild'],
        'OpenStdin': value['openStdin'],
        'Passwd': value['passwd'],
        'Secrets': value['secrets'] == null ? undefined : ((value['secrets'] as Array<any>).map(InspectSecretToJSON)),
        'StdinOnce': value['stdinOnce'],
        'StopSignal': value['stopSignal'],
        'StopTimeout': value['stopTimeout'],
        'SystemdMode': value['systemdMode'],
        'Timeout': value['timeout'],
        'Timezone': value['timezone'],
        'Tty': value['tty'],
        'Umask': value['umask'],
        'User': value['user'],
        'Volumes': value['volumes'],
        'WorkingDir': value['workingDir'],
        'sdNotifyMode': value['sdNotifyMode'],
        'sdNotifySocket': value['sdNotifySocket'],
    };
}

