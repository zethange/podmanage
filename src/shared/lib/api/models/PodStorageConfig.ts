/* tslint:disable */
/* eslint-disable */
/**
 * supports a RESTful API for the Libpod library
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-system-service(1) for more information.  Quick Examples:  \'podman info\'  curl --unix-socket /run/podman/podman.sock http://d/v5.0.0/libpod/info  \'podman pull quay.io/containers/podman\'  curl -XPOST --unix-socket /run/podman/podman.sock -v \'http://d/v5.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman\'  \'podman list images\'  curl --unix-socket /run/podman/podman.sock -v \'http://d/v5.0.0/libpod/images/json\' | jq
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: podman@lists.podman.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Mount } from './Mount';
import {
    MountFromJSON,
    MountFromJSONTyped,
    MountToJSON,
} from './Mount';
import type { NamedVolume } from './NamedVolume';
import {
    NamedVolumeFromJSON,
    NamedVolumeFromJSONTyped,
    NamedVolumeToJSON,
} from './NamedVolume';
import type { OverlayVolume } from './OverlayVolume';
import {
    OverlayVolumeFromJSON,
    OverlayVolumeFromJSONTyped,
    OverlayVolumeToJSON,
} from './OverlayVolume';
import type { ImageVolume } from './ImageVolume';
import {
    ImageVolumeFromJSON,
    ImageVolumeFromJSONTyped,
    ImageVolumeToJSON,
} from './ImageVolume';

/**
 * 
 * @export
 * @interface PodStorageConfig
 */
export interface PodStorageConfig {
    /**
     * Image volumes bind-mount a container-image mount into the pod's infra container.
     * Optional.
     * @type {Array<ImageVolume>}
     * @memberof PodStorageConfig
     */
    imageVolumes?: Array<ImageVolume>;
    /**
     * Mounts are mounts that will be added to the pod.
     * These will supersede Image Volumes and VolumesFrom volumes where
     * there are conflicts.
     * Optional.
     * @type {Array<Mount>}
     * @memberof PodStorageConfig
     */
    mounts?: Array<Mount>;
    /**
     * Overlay volumes are named volumes that will be added to the pod.
     * Optional.
     * @type {Array<OverlayVolume>}
     * @memberof PodStorageConfig
     */
    overlayVolumes?: Array<OverlayVolume>;
    /**
     * ShmSize is the size of the tmpfs to mount in at /dev/shm, in bytes.
     * Conflicts with ShmSize if IpcNS is not private.
     * Optional.
     * @type {number}
     * @memberof PodStorageConfig
     */
    shmSize?: number;
    /**
     * ShmSizeSystemd is the size of systemd-specific tmpfs mounts
     * specifically /run, /run/lock, /var/log/journal and /tmp.
     * Optional
     * @type {number}
     * @memberof PodStorageConfig
     */
    shmSizeSystemd?: number;
    /**
     * Volumes are named volumes that will be added to the pod.
     * These will supersede Image Volumes and VolumesFrom  volumes where
     * there are conflicts.
     * Optional.
     * @type {Array<NamedVolume>}
     * @memberof PodStorageConfig
     */
    volumes?: Array<NamedVolume>;
    /**
     * VolumesFrom is a set of containers whose volumes will be added to
     * this pod. The name or ID of the container must be provided, and
     * may optionally be followed by a : and then one or more
     * comma-separated options. Valid options are 'ro', 'rw', and 'z'.
     * Options will be used for all volumes sourced from the container.
     * @type {Array<string>}
     * @memberof PodStorageConfig
     */
    volumesFrom?: Array<string>;
}

/**
 * Check if a given object implements the PodStorageConfig interface.
 */
export function instanceOfPodStorageConfig(value: object): value is PodStorageConfig {
    return true;
}

export function PodStorageConfigFromJSON(json: any): PodStorageConfig {
    return PodStorageConfigFromJSONTyped(json, false);
}

export function PodStorageConfigFromJSONTyped(json: any, ignoreDiscriminator: boolean): PodStorageConfig {
    if (json == null) {
        return json;
    }
    return {
        
        'imageVolumes': json['image_volumes'] == null ? undefined : ((json['image_volumes'] as Array<any>).map(ImageVolumeFromJSON)),
        'mounts': json['mounts'] == null ? undefined : ((json['mounts'] as Array<any>).map(MountFromJSON)),
        'overlayVolumes': json['overlay_volumes'] == null ? undefined : ((json['overlay_volumes'] as Array<any>).map(OverlayVolumeFromJSON)),
        'shmSize': json['shm_size'] == null ? undefined : json['shm_size'],
        'shmSizeSystemd': json['shm_size_systemd'] == null ? undefined : json['shm_size_systemd'],
        'volumes': json['volumes'] == null ? undefined : ((json['volumes'] as Array<any>).map(NamedVolumeFromJSON)),
        'volumesFrom': json['volumes_from'] == null ? undefined : json['volumes_from'],
    };
}

export function PodStorageConfigToJSON(value?: PodStorageConfig | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'image_volumes': value['imageVolumes'] == null ? undefined : ((value['imageVolumes'] as Array<any>).map(ImageVolumeToJSON)),
        'mounts': value['mounts'] == null ? undefined : ((value['mounts'] as Array<any>).map(MountToJSON)),
        'overlay_volumes': value['overlayVolumes'] == null ? undefined : ((value['overlayVolumes'] as Array<any>).map(OverlayVolumeToJSON)),
        'shm_size': value['shmSize'],
        'shm_size_systemd': value['shmSizeSystemd'],
        'volumes': value['volumes'] == null ? undefined : ((value['volumes'] as Array<any>).map(NamedVolumeToJSON)),
        'volumes_from': value['volumesFrom'],
    };
}

