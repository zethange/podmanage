/* tslint:disable */
/* eslint-disable */
/**
 * supports a RESTful API for the Libpod library
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-system-service(1) for more information.  Quick Examples:  \'podman info\'  curl --unix-socket /run/podman/podman.sock http://d/v5.0.0/libpod/info  \'podman pull quay.io/containers/podman\'  curl -XPOST --unix-socket /run/podman/podman.sock -v \'http://d/v5.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman\'  \'podman list images\'  curl --unix-socket /run/podman/podman.sock -v \'http://d/v5.0.0/libpod/images/json\' | jq
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: podman@lists.podman.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Secret } from './Secret';
import {
    SecretFromJSON,
    SecretFromJSONTyped,
    SecretToJSON,
} from './Secret';
import type { TopologyRequirement } from './TopologyRequirement';
import {
    TopologyRequirementFromJSON,
    TopologyRequirementFromJSONTyped,
    TopologyRequirementToJSON,
} from './TopologyRequirement';
import type { AccessMode } from './AccessMode';
import {
    AccessModeFromJSON,
    AccessModeFromJSONTyped,
    AccessModeToJSON,
} from './AccessMode';
import type { CapacityRange } from './CapacityRange';
import {
    CapacityRangeFromJSON,
    CapacityRangeFromJSONTyped,
    CapacityRangeToJSON,
} from './CapacityRange';

/**
 * 
 * @export
 * @interface ClusterVolumeSpec
 */
export interface ClusterVolumeSpec {
    /**
     * 
     * @type {AccessMode}
     * @memberof ClusterVolumeSpec
     */
    accessMode?: AccessMode;
    /**
     * 
     * @type {TopologyRequirement}
     * @memberof ClusterVolumeSpec
     */
    accessibilityRequirements?: TopologyRequirement;
    /**
     * 
     * @type {string}
     * @memberof ClusterVolumeSpec
     */
    availability?: string;
    /**
     * 
     * @type {CapacityRange}
     * @memberof ClusterVolumeSpec
     */
    capacityRange?: CapacityRange;
    /**
     * Group defines the volume group of this volume. Volumes belonging to the
     * same group can be referred to by group name when creating Services.
     * Referring to a volume by group instructs swarm to treat volumes in that
     * group interchangeably for the purpose of scheduling. Volumes with an
     * empty string for a group technically all belong to the same, emptystring
     * group.
     * @type {string}
     * @memberof ClusterVolumeSpec
     */
    group?: string;
    /**
     * Secrets defines Swarm Secrets that are passed to the CSI storage plugin
     * when operating on this volume.
     * @type {Array<Secret>}
     * @memberof ClusterVolumeSpec
     */
    secrets?: Array<Secret>;
}

/**
 * Check if a given object implements the ClusterVolumeSpec interface.
 */
export function instanceOfClusterVolumeSpec(value: object): value is ClusterVolumeSpec {
    return true;
}

export function ClusterVolumeSpecFromJSON(json: any): ClusterVolumeSpec {
    return ClusterVolumeSpecFromJSONTyped(json, false);
}

export function ClusterVolumeSpecFromJSONTyped(json: any, ignoreDiscriminator: boolean): ClusterVolumeSpec {
    if (json == null) {
        return json;
    }
    return {
        
        'accessMode': json['AccessMode'] == null ? undefined : AccessModeFromJSON(json['AccessMode']),
        'accessibilityRequirements': json['AccessibilityRequirements'] == null ? undefined : TopologyRequirementFromJSON(json['AccessibilityRequirements']),
        'availability': json['Availability'] == null ? undefined : json['Availability'],
        'capacityRange': json['CapacityRange'] == null ? undefined : CapacityRangeFromJSON(json['CapacityRange']),
        'group': json['Group'] == null ? undefined : json['Group'],
        'secrets': json['Secrets'] == null ? undefined : ((json['Secrets'] as Array<any>).map(SecretFromJSON)),
    };
}

export function ClusterVolumeSpecToJSON(value?: ClusterVolumeSpec | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'AccessMode': AccessModeToJSON(value['accessMode']),
        'AccessibilityRequirements': TopologyRequirementToJSON(value['accessibilityRequirements']),
        'Availability': value['availability'],
        'CapacityRange': CapacityRangeToJSON(value['capacityRange']),
        'Group': value['group'],
        'Secrets': value['secrets'] == null ? undefined : ((value['secrets'] as Array<any>).map(SecretToJSON)),
    };
}

