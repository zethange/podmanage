/* tslint:disable */
/* eslint-disable */
/**
 * supports a RESTful API for the Libpod library
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-system-service(1) for more information.  Quick Examples:  \'podman info\'  curl --unix-socket /run/podman/podman.sock http://d/v5.0.0/libpod/info  \'podman pull quay.io/containers/podman\'  curl -XPOST --unix-socket /run/podman/podman.sock -v \'http://d/v5.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman\'  \'podman list images\'  curl --unix-socket /run/podman/podman.sock -v \'http://d/v5.0.0/libpod/images/json\' | jq
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: podman@lists.podman.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ListContainerNamespaces } from './ListContainerNamespaces';
import {
    ListContainerNamespacesFromJSON,
    ListContainerNamespacesFromJSONTyped,
    ListContainerNamespacesToJSON,
} from './ListContainerNamespaces';
import type { ContainerSize } from './ContainerSize';
import {
    ContainerSizeFromJSON,
    ContainerSizeFromJSONTyped,
    ContainerSizeToJSON,
} from './ContainerSize';
import type { PortMapping } from './PortMapping';
import {
    PortMappingFromJSON,
    PortMappingFromJSONTyped,
    PortMappingToJSON,
} from './PortMapping';

/**
 * ListContainer describes a container suitable for listing
 * @export
 * @interface ListContainer
 */
export interface ListContainer {
    /**
     * AutoRemove
     * @type {boolean}
     * @memberof ListContainer
     */
    autoRemove?: boolean;
    /**
     * CIDFile specified at creation time.
     * @type {string}
     * @memberof ListContainer
     */
    cIDFile?: string;
    /**
     * Container command
     * @type {Array<string>}
     * @memberof ListContainer
     */
    command?: Array<string>;
    /**
     * Container creation time
     * @type {Date}
     * @memberof ListContainer
     */
    created?: Date;
    /**
     * Human-readable container creation time.
     * @type {string}
     * @memberof ListContainer
     */
    createdAt?: string;
    /**
     * If container has exited, the return code from the command
     * @type {number}
     * @memberof ListContainer
     */
    exitCode?: number;
    /**
     * If container has exited/stopped
     * @type {boolean}
     * @memberof ListContainer
     */
    exited?: boolean;
    /**
     * Time container exited
     * @type {number}
     * @memberof ListContainer
     */
    exitedAt?: number;
    /**
     * ExposedPorts contains the ports that are exposed but not forwarded,
     * see Ports for forwarded ports.
     * The key is the port number and the string slice contains the protocols,
     * i.e. "tcp", "udp" and "sctp".
     * @type {object}
     * @memberof ListContainer
     */
    exposedPorts?: object;
    /**
     * The unique identifier for the container
     * @type {string}
     * @memberof ListContainer
     */
    id?: string;
    /**
     * Container image
     * @type {string}
     * @memberof ListContainer
     */
    image?: string;
    /**
     * Container image ID
     * @type {string}
     * @memberof ListContainer
     */
    imageID?: string;
    /**
     * If this container is a Pod infra container
     * @type {boolean}
     * @memberof ListContainer
     */
    isInfra?: boolean;
    /**
     * Labels for container
     * @type {{ [key: string]: string; }}
     * @memberof ListContainer
     */
    labels?: { [key: string]: string; };
    /**
     * User volume mounts
     * @type {Array<string>}
     * @memberof ListContainer
     */
    mounts?: Array<string>;
    /**
     * The names assigned to the container
     * @type {Array<string>}
     * @memberof ListContainer
     */
    names?: Array<string>;
    /**
     * 
     * @type {ListContainerNamespaces}
     * @memberof ListContainer
     */
    namespaces?: ListContainerNamespaces;
    /**
     * The network names assigned to the container
     * @type {Array<string>}
     * @memberof ListContainer
     */
    networks?: Array<string>;
    /**
     * The process id of the container
     * @type {number}
     * @memberof ListContainer
     */
    pid?: number;
    /**
     * If the container is part of Pod, the Pod ID. Requires the pod
     * boolean to be set
     * @type {string}
     * @memberof ListContainer
     */
    pod?: string;
    /**
     * If the container is part of Pod, the Pod name. Requires the pod
     * boolean to be set
     * @type {string}
     * @memberof ListContainer
     */
    podName?: string;
    /**
     * Port mappings
     * @type {Array<PortMapping>}
     * @memberof ListContainer
     */
    ports?: Array<PortMapping>;
    /**
     * Restarts is how many times the container was restarted by its
     * restart policy. This is NOT incremented by normal container restarts
     * (only by restart policy).
     * @type {number}
     * @memberof ListContainer
     */
    restarts?: number;
    /**
     * 
     * @type {ContainerSize}
     * @memberof ListContainer
     */
    size?: ContainerSize;
    /**
     * Time when container started
     * @type {number}
     * @memberof ListContainer
     */
    startedAt?: number;
    /**
     * State of container
     * @type {string}
     * @memberof ListContainer
     */
    state?: string;
    /**
     * Status is a human-readable approximation of a duration for json output
     * @type {string}
     * @memberof ListContainer
     */
    status?: string;
}

/**
 * Check if a given object implements the ListContainer interface.
 */
export function instanceOfListContainer(value: object): value is ListContainer {
    return true;
}

export function ListContainerFromJSON(json: any): ListContainer {
    return ListContainerFromJSONTyped(json, false);
}

export function ListContainerFromJSONTyped(json: any, ignoreDiscriminator: boolean): ListContainer {
    if (json == null) {
        return json;
    }
    return {
        
        'autoRemove': json['AutoRemove'] == null ? undefined : json['AutoRemove'],
        'cIDFile': json['CIDFile'] == null ? undefined : json['CIDFile'],
        'command': json['Command'] == null ? undefined : json['Command'],
        'created': json['Created'] == null ? undefined : (new Date(json['Created'])),
        'createdAt': json['CreatedAt'] == null ? undefined : json['CreatedAt'],
        'exitCode': json['ExitCode'] == null ? undefined : json['ExitCode'],
        'exited': json['Exited'] == null ? undefined : json['Exited'],
        'exitedAt': json['ExitedAt'] == null ? undefined : json['ExitedAt'],
        'exposedPorts': json['ExposedPorts'] == null ? undefined : json['ExposedPorts'],
        'id': json['Id'] == null ? undefined : json['Id'],
        'image': json['Image'] == null ? undefined : json['Image'],
        'imageID': json['ImageID'] == null ? undefined : json['ImageID'],
        'isInfra': json['IsInfra'] == null ? undefined : json['IsInfra'],
        'labels': json['Labels'] == null ? undefined : json['Labels'],
        'mounts': json['Mounts'] == null ? undefined : json['Mounts'],
        'names': json['Names'] == null ? undefined : json['Names'],
        'namespaces': json['Namespaces'] == null ? undefined : ListContainerNamespacesFromJSON(json['Namespaces']),
        'networks': json['Networks'] == null ? undefined : json['Networks'],
        'pid': json['Pid'] == null ? undefined : json['Pid'],
        'pod': json['Pod'] == null ? undefined : json['Pod'],
        'podName': json['PodName'] == null ? undefined : json['PodName'],
        'ports': json['Ports'] == null ? undefined : ((json['Ports'] as Array<any>).map(PortMappingFromJSON)),
        'restarts': json['Restarts'] == null ? undefined : json['Restarts'],
        'size': json['Size'] == null ? undefined : ContainerSizeFromJSON(json['Size']),
        'startedAt': json['StartedAt'] == null ? undefined : json['StartedAt'],
        'state': json['State'] == null ? undefined : json['State'],
        'status': json['Status'] == null ? undefined : json['Status'],
    };
}

export function ListContainerToJSON(value?: ListContainer | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'AutoRemove': value['autoRemove'],
        'CIDFile': value['cIDFile'],
        'Command': value['command'],
        'Created': value['created'] == null ? undefined : ((value['created']).toISOString()),
        'CreatedAt': value['createdAt'],
        'ExitCode': value['exitCode'],
        'Exited': value['exited'],
        'ExitedAt': value['exitedAt'],
        'ExposedPorts': value['exposedPorts'],
        'Id': value['id'],
        'Image': value['image'],
        'ImageID': value['imageID'],
        'IsInfra': value['isInfra'],
        'Labels': value['labels'],
        'Mounts': value['mounts'],
        'Names': value['names'],
        'Namespaces': ListContainerNamespacesToJSON(value['namespaces']),
        'Networks': value['networks'],
        'Pid': value['pid'],
        'Pod': value['pod'],
        'PodName': value['podName'],
        'Ports': value['ports'] == null ? undefined : ((value['ports'] as Array<any>).map(PortMappingToJSON)),
        'Restarts': value['restarts'],
        'Size': ContainerSizeToJSON(value['size']),
        'StartedAt': value['startedAt'],
        'State': value['state'],
        'Status': value['status'],
    };
}

