/* tslint:disable */
/* eslint-disable */
/**
 * supports a RESTful API for the Libpod library
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-system-service(1) for more information.  Quick Examples:  \'podman info\'  curl --unix-socket /run/podman/podman.sock http://d/v5.0.0/libpod/info  \'podman pull quay.io/containers/podman\'  curl -XPOST --unix-socket /run/podman/podman.sock -v \'http://d/v5.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman\'  \'podman list images\'  curl --unix-socket /run/podman/podman.sock -v \'http://d/v5.0.0/libpod/images/json\' | jq
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: podman@lists.podman.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { RootFS } from './RootFS';
import {
    RootFSFromJSON,
    RootFSFromJSONTyped,
    RootFSToJSON,
} from './RootFS';
import type { Config } from './Config';
import {
    ConfigFromJSON,
    ConfigFromJSONTyped,
    ConfigToJSON,
} from './Config';
import type { Metadata } from './Metadata';
import {
    MetadataFromJSON,
    MetadataFromJSONTyped,
    MetadataToJSON,
} from './Metadata';
import type { GraphDriverData } from './GraphDriverData';
import {
    GraphDriverDataFromJSON,
    GraphDriverDataFromJSONTyped,
    GraphDriverDataToJSON,
} from './GraphDriverData';

/**
 * 
 * @export
 * @interface ImageInspect
 */
export interface ImageInspect {
    /**
     * Architecture is the hardware CPU architecture that the image runs on.
     * @type {string}
     * @memberof ImageInspect
     */
    architecture?: string;
    /**
     * Author is the name of the author that was specified when committing the
     * image, or as specified through MAINTAINER (deprecated) in the Dockerfile.
     * @type {string}
     * @memberof ImageInspect
     */
    author?: string;
    /**
     * Comment is an optional message that can be set when committing or
     * importing the image.
     * @type {string}
     * @memberof ImageInspect
     */
    comment?: string;
    /**
     * 
     * @type {Config}
     * @memberof ImageInspect
     */
    config?: Config;
    /**
     * Container is for backwards compat but is basically unused
     * @type {string}
     * @memberof ImageInspect
     */
    container?: string;
    /**
     * 
     * @type {Config}
     * @memberof ImageInspect
     */
    containerConfig?: Config;
    /**
     * Created is the date and time at which the image was created, formatted in
     * RFC 3339 nano-seconds (time.RFC3339Nano).
     * 
     * This information is only available if present in the image,
     * and omitted otherwise.
     * @type {string}
     * @memberof ImageInspect
     */
    created?: string;
    /**
     * DockerVersion is the version of Docker that was used to build the image.
     * 
     * Depending on how the image was created, this field may be empty.
     * @type {string}
     * @memberof ImageInspect
     */
    dockerVersion?: string;
    /**
     * 
     * @type {GraphDriverData}
     * @memberof ImageInspect
     */
    graphDriver?: GraphDriverData;
    /**
     * ID is the content-addressable ID of an image.
     * 
     * This identifier is a content-addressable digest calculated from the
     * image's configuration (which includes the digests of layers used by
     * the image).
     * 
     * Note that this digest differs from the `RepoDigests` below, which
     * holds digests of image manifests that reference the image.
     * @type {string}
     * @memberof ImageInspect
     */
    id?: string;
    /**
     * 
     * @type {Metadata}
     * @memberof ImageInspect
     */
    metadata?: Metadata;
    /**
     * OS is the Operating System the image is built to run on.
     * @type {string}
     * @memberof ImageInspect
     */
    os?: string;
    /**
     * OsVersion is the version of the Operating System the image is built to
     * run on (especially for Windows).
     * @type {string}
     * @memberof ImageInspect
     */
    osVersion?: string;
    /**
     * Parent is the ID of the parent image.
     * 
     * Depending on how the image was created, this field may be empty and
     * is only set for images that were built/created locally. This field
     * is empty if the image was pulled from an image registry.
     * @type {string}
     * @memberof ImageInspect
     */
    parent?: string;
    /**
     * RepoDigests is a list of content-addressable digests of locally available
     * image manifests that the image is referenced from. Multiple manifests can
     * refer to the same image.
     * 
     * These digests are usually only available if the image was either pulled
     * from a registry, or if the image was pushed to a registry, which is when
     * the manifest is generated and its digest calculated.
     * @type {Array<string>}
     * @memberof ImageInspect
     */
    repoDigests?: Array<string>;
    /**
     * RepoTags is a list of image names/tags in the local image cache that
     * reference this image.
     * 
     * Multiple image tags can refer to the same image, and this list may be
     * empty if no tags reference the image, in which case the image is
     * "untagged", in which case it can still be referenced by its ID.
     * @type {Array<string>}
     * @memberof ImageInspect
     */
    repoTags?: Array<string>;
    /**
     * 
     * @type {RootFS}
     * @memberof ImageInspect
     */
    rootFS?: RootFS;
    /**
     * Size is the total size of the image including all layers it is composed of.
     * @type {number}
     * @memberof ImageInspect
     */
    size?: number;
    /**
     * Variant is the CPU architecture variant (presently ARM-only).
     * @type {string}
     * @memberof ImageInspect
     */
    variant?: string;
    /**
     * VirtualSize is the total size of the image including all layers it is
     * composed of.
     * 
     * Deprecated: this field is omitted in API v1.44, but kept for backward compatibility. Use Size instead.
     * @type {number}
     * @memberof ImageInspect
     */
    virtualSize?: number;
}

/**
 * Check if a given object implements the ImageInspect interface.
 */
export function instanceOfImageInspect(value: object): value is ImageInspect {
    return true;
}

export function ImageInspectFromJSON(json: any): ImageInspect {
    return ImageInspectFromJSONTyped(json, false);
}

export function ImageInspectFromJSONTyped(json: any, ignoreDiscriminator: boolean): ImageInspect {
    if (json == null) {
        return json;
    }
    return {
        
        'architecture': json['Architecture'] == null ? undefined : json['Architecture'],
        'author': json['Author'] == null ? undefined : json['Author'],
        'comment': json['Comment'] == null ? undefined : json['Comment'],
        'config': json['Config'] == null ? undefined : ConfigFromJSON(json['Config']),
        'container': json['Container'] == null ? undefined : json['Container'],
        'containerConfig': json['ContainerConfig'] == null ? undefined : ConfigFromJSON(json['ContainerConfig']),
        'created': json['Created'] == null ? undefined : json['Created'],
        'dockerVersion': json['DockerVersion'] == null ? undefined : json['DockerVersion'],
        'graphDriver': json['GraphDriver'] == null ? undefined : GraphDriverDataFromJSON(json['GraphDriver']),
        'id': json['Id'] == null ? undefined : json['Id'],
        'metadata': json['Metadata'] == null ? undefined : MetadataFromJSON(json['Metadata']),
        'os': json['Os'] == null ? undefined : json['Os'],
        'osVersion': json['OsVersion'] == null ? undefined : json['OsVersion'],
        'parent': json['Parent'] == null ? undefined : json['Parent'],
        'repoDigests': json['RepoDigests'] == null ? undefined : json['RepoDigests'],
        'repoTags': json['RepoTags'] == null ? undefined : json['RepoTags'],
        'rootFS': json['RootFS'] == null ? undefined : RootFSFromJSON(json['RootFS']),
        'size': json['Size'] == null ? undefined : json['Size'],
        'variant': json['Variant'] == null ? undefined : json['Variant'],
        'virtualSize': json['VirtualSize'] == null ? undefined : json['VirtualSize'],
    };
}

export function ImageInspectToJSON(value?: ImageInspect | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'Architecture': value['architecture'],
        'Author': value['author'],
        'Comment': value['comment'],
        'Config': ConfigToJSON(value['config']),
        'Container': value['container'],
        'ContainerConfig': ConfigToJSON(value['containerConfig']),
        'Created': value['created'],
        'DockerVersion': value['dockerVersion'],
        'GraphDriver': GraphDriverDataToJSON(value['graphDriver']),
        'Id': value['id'],
        'Metadata': MetadataToJSON(value['metadata']),
        'Os': value['os'],
        'OsVersion': value['osVersion'],
        'Parent': value['parent'],
        'RepoDigests': value['repoDigests'],
        'RepoTags': value['repoTags'],
        'RootFS': RootFSToJSON(value['rootFS']),
        'Size': value['size'],
        'Variant': value['variant'],
        'VirtualSize': value['virtualSize'],
    };
}

