/* tslint:disable */
/* eslint-disable */
/**
 * supports a RESTful API for the Libpod library
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-system-service(1) for more information.  Quick Examples:  \'podman info\'  curl --unix-socket /run/podman/podman.sock http://d/v5.0.0/libpod/info  \'podman pull quay.io/containers/podman\'  curl -XPOST --unix-socket /run/podman/podman.sock -v \'http://d/v5.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman\'  \'podman list images\'  curl --unix-socket /run/podman/podman.sock -v \'http://d/v5.0.0/libpod/images/json\' | jq
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: podman@lists.podman.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { InspectBlkioThrottleDevice } from './InspectBlkioThrottleDevice';
import {
    InspectBlkioThrottleDeviceFromJSON,
    InspectBlkioThrottleDeviceFromJSONTyped,
    InspectBlkioThrottleDeviceToJSON,
} from './InspectBlkioThrottleDevice';
import type { InspectIDMappings } from './InspectIDMappings';
import {
    InspectIDMappingsFromJSON,
    InspectIDMappingsFromJSONTyped,
    InspectIDMappingsToJSON,
} from './InspectIDMappings';
import type { InspectBlkioWeightDevice } from './InspectBlkioWeightDevice';
import {
    InspectBlkioWeightDeviceFromJSON,
    InspectBlkioWeightDeviceFromJSONTyped,
    InspectBlkioWeightDeviceToJSON,
} from './InspectBlkioWeightDevice';
import type { InspectHostPort } from './InspectHostPort';
import {
    InspectHostPortFromJSON,
    InspectHostPortFromJSONTyped,
    InspectHostPortToJSON,
} from './InspectHostPort';
import type { InspectRestartPolicy } from './InspectRestartPolicy';
import {
    InspectRestartPolicyFromJSON,
    InspectRestartPolicyFromJSONTyped,
    InspectRestartPolicyToJSON,
} from './InspectRestartPolicy';
import type { InspectDevice } from './InspectDevice';
import {
    InspectDeviceFromJSON,
    InspectDeviceFromJSONTyped,
    InspectDeviceToJSON,
} from './InspectDevice';
import type { InspectLogConfig } from './InspectLogConfig';
import {
    InspectLogConfigFromJSON,
    InspectLogConfigFromJSONTyped,
    InspectLogConfigToJSON,
} from './InspectLogConfig';
import type { InspectUlimit } from './InspectUlimit';
import {
    InspectUlimitFromJSON,
    InspectUlimitFromJSONTyped,
    InspectUlimitToJSON,
} from './InspectUlimit';

/**
 * nolint:revive,stylecheck // Field names are fixed for compatibility and cannot be changed.
 * @export
 * @interface InspectContainerHostConfig
 */
export interface InspectContainerHostConfig {
    /**
     * Annotations are provided to the runtime when the container is
     * started.
     * @type {{ [key: string]: string; }}
     * @memberof InspectContainerHostConfig
     */
    annotations?: { [key: string]: string; };
    /**
     * AutoRemove is whether the container will be automatically removed on
     * exiting.
     * It is not handled directly within libpod and is stored in an
     * annotation.
     * @type {boolean}
     * @memberof InspectContainerHostConfig
     */
    autoRemove?: boolean;
    /**
     * Binds contains an array of user-added mounts.
     * Both volume mounts and named volumes are included.
     * Tmpfs mounts are NOT included.
     * In 'docker inspect' this is separated into 'Binds' and 'Mounts' based
     * on how a mount was added. We do not make this distinction and do not
     * include a Mounts field in inspect.
     * Format: <src>:<destination>[:<comma-separated options>]
     * @type {Array<string>}
     * @memberof InspectContainerHostConfig
     */
    binds?: Array<string>;
    /**
     * BlkioDeviceReadBps is an array of I/O throttle parameters for
     * individual device nodes.
     * This specifically sets read rate cap in bytes per second for device
     * nodes.
     * As with BlkioWeightDevice, we pull the path from /sys/dev, and we
     * don't guarantee the path will be identical to the original (though
     * the node will be).
     * @type {Array<InspectBlkioThrottleDevice>}
     * @memberof InspectContainerHostConfig
     */
    blkioDeviceReadBps?: Array<InspectBlkioThrottleDevice>;
    /**
     * BlkioDeviceReadIOps is an array of I/O throttle parameters for
     * individual device nodes.
     * This specifically sets the read rate cap in iops per second for
     * device nodes.
     * As with BlkioWeightDevice, we pull the path from /sys/dev, and we
     * don't guarantee the path will be identical to the original (though
     * the node will be).
     * @type {Array<InspectBlkioThrottleDevice>}
     * @memberof InspectContainerHostConfig
     */
    blkioDeviceReadIOps?: Array<InspectBlkioThrottleDevice>;
    /**
     * BlkioDeviceWriteBps is an array of I/O throttle parameters for
     * individual device nodes.
     * this specifically sets write rate cap in bytes per second for device
     * nodes.
     * as with BlkioWeightDevice, we pull the path from /sys/dev, and we
     * don't guarantee the path will be identical to the original (though
     * the node will be).
     * @type {Array<InspectBlkioThrottleDevice>}
     * @memberof InspectContainerHostConfig
     */
    blkioDeviceWriteBps?: Array<InspectBlkioThrottleDevice>;
    /**
     * BlkioDeviceWriteIOps is an array of I/O throttle parameters for
     * individual device nodes.
     * This specifically sets the write rate cap in iops per second for
     * device nodes.
     * As with BlkioWeightDevice, we pull the path from /sys/dev, and we
     * don't guarantee the path will be identical to the original (though
     * the node will be).
     * @type {Array<InspectBlkioThrottleDevice>}
     * @memberof InspectContainerHostConfig
     */
    blkioDeviceWriteIOps?: Array<InspectBlkioThrottleDevice>;
    /**
     * BlkioWeight indicates the I/O resources allocated to the container.
     * It is a relative weight in the scheduler for assigning I/O time
     * versus other Cgroups.
     * @type {number}
     * @memberof InspectContainerHostConfig
     */
    blkioWeight?: number;
    /**
     * BlkioWeightDevice is an array of I/O resource priorities for
     * individual device nodes.
     * Unfortunately, the spec only stores the device's Major/Minor numbers
     * and not the path, which is used here.
     * Fortunately, the kernel provides an interface for retrieving the path
     * of a given node by major:minor at /sys/dev/. However, the exact path
     * in use may not be what was used in the original CLI invocation -
     * though it is guaranteed that the device node will be the same, and
     * using the given path will be functionally identical.
     * @type {Array<InspectBlkioWeightDevice>}
     * @memberof InspectContainerHostConfig
     */
    blkioWeightDevice?: Array<InspectBlkioWeightDevice>;
    /**
     * CapAdd is a list of capabilities added to the container.
     * It is not directly stored by Libpod, and instead computed from the
     * capabilities listed in the container's spec, compared against a set
     * of default capabilities.
     * @type {Array<string>}
     * @memberof InspectContainerHostConfig
     */
    capAdd?: Array<string>;
    /**
     * CapDrop is a list of capabilities removed from the container.
     * It is not directly stored by libpod, and instead computed from the
     * capabilities listed in the container's spec, compared against a set
     * of default capabilities.
     * @type {Array<string>}
     * @memberof InspectContainerHostConfig
     */
    capDrop?: Array<string>;
    /**
     * Cgroup contains the container's cgroup. It is presently not
     * populated.
     * TODO.
     * @type {string}
     * @memberof InspectContainerHostConfig
     */
    cgroup?: string;
    /**
     * CgroupConf is the configuration for cgroup v2.
     * @type {{ [key: string]: string; }}
     * @memberof InspectContainerHostConfig
     */
    cgroupConf?: { [key: string]: string; };
    /**
     * CgroupManager is the cgroup manager used by the container.
     * At present, allowed values are either "cgroupfs" or "systemd".
     * @type {string}
     * @memberof InspectContainerHostConfig
     */
    cgroupManager?: string;
    /**
     * CgroupMode is the configuration of the container's cgroup namespace.
     * Populated as follows:
     * private - a cgroup namespace has been created
     * host - No cgroup namespace created
     * container:<id> - Using another container's cgroup namespace
     * ns:<path> - A path to a cgroup namespace has been specified
     * @type {string}
     * @memberof InspectContainerHostConfig
     */
    cgroupMode?: string;
    /**
     * CgroupParent is the Cgroup parent of the container.
     * Only set if not default.
     * @type {string}
     * @memberof InspectContainerHostConfig
     */
    cgroupParent?: string;
    /**
     * Cgroups contains the container's Cgroup mode.
     * Allowed values are "default" (container is creating Cgroups) and
     * "disabled" (container is not creating Cgroups).
     * This is Libpod-specific and not included in `docker inspect`.
     * @type {string}
     * @memberof InspectContainerHostConfig
     */
    cgroups?: string;
    /**
     * ConsoleSize is an array of 2 integers showing the size of the
     * container's console.
     * It is only set if the container is creating a terminal.
     * TODO.
     * @type {Array<number>}
     * @memberof InspectContainerHostConfig
     */
    consoleSize?: Array<number>;
    /**
     * ContainerIDFile is a file created during container creation to hold
     * the ID of the created container.
     * This is not handled within libpod and is stored in an annotation.
     * @type {string}
     * @memberof InspectContainerHostConfig
     */
    containerIDFile?: string;
    /**
     * CpuCount is Windows-only and not presently implemented.
     * @type {number}
     * @memberof InspectContainerHostConfig
     */
    cpuCount?: number;
    /**
     * CpuPercent is Windows-only and not presently implemented.
     * @type {number}
     * @memberof InspectContainerHostConfig
     */
    cpuPercent?: number;
    /**
     * CpuPeriod is the length of a CPU period in microseconds.
     * It relates directly to CpuQuota.
     * @type {number}
     * @memberof InspectContainerHostConfig
     */
    cpuPeriod?: number;
    /**
     * CpuPeriod is the amount of time (in microseconds) that a container
     * can use the CPU in every CpuPeriod.
     * @type {number}
     * @memberof InspectContainerHostConfig
     */
    cpuQuota?: number;
    /**
     * CpuRealtimePeriod is the length of time (in microseconds) of the CPU
     * realtime period. If set to 0, no time will be allocated to realtime
     * tasks.
     * @type {number}
     * @memberof InspectContainerHostConfig
     */
    cpuRealtimePeriod?: number;
    /**
     * CpuRealtimeRuntime is the length of time (in microseconds) allocated
     * for realtime tasks within every CpuRealtimePeriod.
     * @type {number}
     * @memberof InspectContainerHostConfig
     */
    cpuRealtimeRuntime?: number;
    /**
     * CpuShares indicates the CPU resources allocated to the container.
     * It is a relative weight in the scheduler for assigning CPU time
     * versus other Cgroups.
     * @type {number}
     * @memberof InspectContainerHostConfig
     */
    cpuShares?: number;
    /**
     * CpusetCpus is the set of CPUs that the container will execute on.
     * Formatted as `0-3` or `0,2`. Default (if unset) is all CPUs.
     * @type {string}
     * @memberof InspectContainerHostConfig
     */
    cpusetCpus?: string;
    /**
     * CpusetMems is the set of memory nodes the container will use.
     * Formatted as `0-3` or `0,2`. Default (if unset) is all memory nodes.
     * @type {string}
     * @memberof InspectContainerHostConfig
     */
    cpusetMems?: string;
    /**
     * Devices is a list of device nodes that will be added to the
     * container.
     * These are stored in the OCI spec only as type, major, minor while we
     * display the host path. We convert this with /sys/dev, but we cannot
     * guarantee that the host path will be identical - only that the actual
     * device will be.
     * @type {Array<InspectDevice>}
     * @memberof InspectContainerHostConfig
     */
    devices?: Array<InspectDevice>;
    /**
     * DiskQuota is the maximum amount of disk space the container may use
     * (in bytes).
     * Presently not populated.
     * TODO.
     * @type {number}
     * @memberof InspectContainerHostConfig
     */
    diskQuota?: number;
    /**
     * Dns is a list of DNS nameservers that will be added to the
     * container's resolv.conf
     * @type {Array<string>}
     * @memberof InspectContainerHostConfig
     */
    dns?: Array<string>;
    /**
     * DnsOptions is a list of DNS options that will be set in the
     * container's resolv.conf
     * @type {Array<string>}
     * @memberof InspectContainerHostConfig
     */
    dnsOptions?: Array<string>;
    /**
     * DnsSearch is a list of DNS search domains that will be set in the
     * container's resolv.conf
     * @type {Array<string>}
     * @memberof InspectContainerHostConfig
     */
    dnsSearch?: Array<string>;
    /**
     * ExtraHosts contains hosts that will be added to the container's
     * etc/hosts.
     * @type {Array<string>}
     * @memberof InspectContainerHostConfig
     */
    extraHosts?: Array<string>;
    /**
     * GroupAdd contains groups that the user inside the container will be
     * added to.
     * @type {Array<string>}
     * @memberof InspectContainerHostConfig
     */
    groupAdd?: Array<string>;
    /**
     * 
     * @type {InspectIDMappings}
     * @memberof InspectContainerHostConfig
     */
    iDMappings?: InspectIDMappings;
    /**
     * IOMaximumBandwidth is Windows-only and not presently implemented.
     * @type {number}
     * @memberof InspectContainerHostConfig
     */
    iOMaximumBandwidth?: number;
    /**
     * IOMaximumIOps is Windows-only and not presently implemented.
     * @type {number}
     * @memberof InspectContainerHostConfig
     */
    iOMaximumIOps?: number;
    /**
     * Init indicates whether the container has an init mounted into it.
     * @type {boolean}
     * @memberof InspectContainerHostConfig
     */
    init?: boolean;
    /**
     * IntelRdtClosID defines the Intel RDT CAT Class Of Service (COS) that
     * all processes of the container should run in.
     * @type {string}
     * @memberof InspectContainerHostConfig
     */
    intelRdtClosID?: string;
    /**
     * IpcMode represents the configuration of the container's IPC
     * namespace.
     * Populated as follows:
     * "" (empty string) - Default, an IPC namespace will be created
     * host - No IPC namespace created
     * container:<id> - Using another container's IPC namespace
     * ns:<path> - A path to an IPC namespace has been specified
     * @type {string}
     * @memberof InspectContainerHostConfig
     */
    ipcMode?: string;
    /**
     * Isolation is presently unused and provided solely for Docker
     * compatibility.
     * @type {string}
     * @memberof InspectContainerHostConfig
     */
    isolation?: string;
    /**
     * KernelMemory is the maximum amount of memory the kernel will devote
     * to the container.
     * @type {number}
     * @memberof InspectContainerHostConfig
     */
    kernelMemory?: number;
    /**
     * Links is unused, and provided purely for Docker compatibility.
     * @type {Array<string>}
     * @memberof InspectContainerHostConfig
     */
    links?: Array<string>;
    /**
     * 
     * @type {InspectLogConfig}
     * @memberof InspectContainerHostConfig
     */
    logConfig?: InspectLogConfig;
    /**
     * Memory indicates the memory resources allocated to the container.
     * This is the limit (in bytes) of RAM the container may use.
     * @type {number}
     * @memberof InspectContainerHostConfig
     */
    memory?: number;
    /**
     * MemoryReservation is the reservation (soft limit) of memory available
     * to the container. Soft limits are warnings only and can be exceeded.
     * @type {number}
     * @memberof InspectContainerHostConfig
     */
    memoryReservation?: number;
    /**
     * MemorySwap is the total limit for all memory available to the
     * container, including swap. 0 indicates that there is no limit to the
     * amount of memory available.
     * @type {number}
     * @memberof InspectContainerHostConfig
     */
    memorySwap?: number;
    /**
     * MemorySwappiness is the willingness of the kernel to page container
     * memory to swap. It is an integer from 0 to 100, with low numbers
     * being more likely to be put into swap.
     * 1, the default, will not set swappiness and use the system defaults.
     * @type {number}
     * @memberof InspectContainerHostConfig
     */
    memorySwappiness?: number;
    /**
     * NanoCpus indicates number of CPUs allocated to the container.
     * It is an integer where one full CPU is indicated by 1000000000 (one
     * billion).
     * Thus, 2.5 CPUs (fractional portions of CPUs are allowed) would be
     * 2500000000 (2.5 billion).
     * In 'docker inspect' this is set exclusively of two further options in
     * the output (CpuPeriod and CpuQuota) which are both used to implement
     * this functionality.
     * We can't distinguish here, so if CpuQuota is set to the default of
     * 100000, we will set both CpuQuota, CpuPeriod, and NanoCpus. If
     * CpuQuota is not the default, we will not set NanoCpus.
     * @type {number}
     * @memberof InspectContainerHostConfig
     */
    nanoCpus?: number;
    /**
     * NetworkMode is the configuration of the container's network
     * namespace.
     * Populated as follows:
     * default - A network namespace is being created and configured via CNI
     * none - A network namespace is being created, not configured via CNI
     * host - No network namespace created
     * container:<id> - Using another container's network namespace
     * ns:<path> - A path to a network namespace has been specified
     * @type {string}
     * @memberof InspectContainerHostConfig
     */
    networkMode?: string;
    /**
     * OomKillDisable indicates whether the kernel OOM killer is disabled
     * for the container.
     * @type {boolean}
     * @memberof InspectContainerHostConfig
     */
    oomKillDisable?: boolean;
    /**
     * OOMScoreAdj is an adjustment that will be made to the container's OOM
     * score.
     * @type {number}
     * @memberof InspectContainerHostConfig
     */
    oomScoreAdj?: number;
    /**
     * PidMode represents the configuration of the container's PID
     * namespace.
     * Populated as follows:
     * "" (empty string) - Default, a PID namespace will be created
     * host - No PID namespace created
     * container:<id> - Using another container's PID namespace
     * ns:<path> - A path to a PID namespace has been specified
     * @type {string}
     * @memberof InspectContainerHostConfig
     */
    pidMode?: string;
    /**
     * PidsLimit is the maximum number of PIDs that may be created within
     * the container. 0, the default, indicates no limit.
     * @type {number}
     * @memberof InspectContainerHostConfig
     */
    pidsLimit?: number;
    /**
     * PortBindings contains the container's port bindings.
     * It is formatted as map[string][]InspectHostPort.
     * The string key here is formatted as <integer port number>/<protocol>
     * and represents the container port. A single container port may be
     * bound to multiple host ports (on different IPs).
     * @type {{ [key: string]: Array<InspectHostPort>; }}
     * @memberof InspectContainerHostConfig
     */
    portBindings?: { [key: string]: Array<InspectHostPort>; };
    /**
     * Privileged indicates whether the container is running with elevated
     * privileges.
     * This has a very specific meaning in the Docker sense, so it's very
     * difficult to decode from the spec and config, and so is stored as an
     * annotation.
     * @type {boolean}
     * @memberof InspectContainerHostConfig
     */
    privileged?: boolean;
    /**
     * PublishAllPorts indicates whether image ports are being published.
     * This is not directly stored in libpod and is saved as an annotation.
     * @type {boolean}
     * @memberof InspectContainerHostConfig
     */
    publishAllPorts?: boolean;
    /**
     * ReadonlyRootfs is whether the container will be mounted read-only.
     * @type {boolean}
     * @memberof InspectContainerHostConfig
     */
    readonlyRootfs?: boolean;
    /**
     * 
     * @type {InspectRestartPolicy}
     * @memberof InspectContainerHostConfig
     */
    restartPolicy?: InspectRestartPolicy;
    /**
     * Runtime is provided purely for Docker compatibility.
     * It is set unconditionally to "oci" as Podman does not presently
     * support non-OCI runtimes.
     * @type {string}
     * @memberof InspectContainerHostConfig
     */
    runtime?: string;
    /**
     * SecurityOpt is a list of security-related options that are set in the
     * container.
     * @type {Array<string>}
     * @memberof InspectContainerHostConfig
     */
    securityOpt?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof InspectContainerHostConfig
     */
    shmSize?: number;
    /**
     * Tmpfs is a list of tmpfs filesystems that will be mounted into the
     * container.
     * It is a map of destination path to options for the mount.
     * @type {{ [key: string]: string; }}
     * @memberof InspectContainerHostConfig
     */
    tmpfs?: { [key: string]: string; };
    /**
     * UTSMode represents the configuration of the container's UID
     * namespace.
     * Populated as follows:
     * "" (empty string) - Default, a UTS namespace will be created
     * host - no UTS namespace created
     * container:<id> - Using another container's UTS namespace
     * ns:<path> - A path to a UTS namespace has been specified
     * @type {string}
     * @memberof InspectContainerHostConfig
     */
    uTSMode?: string;
    /**
     * Ulimits is a set of ulimits that will be set within the container.
     * @type {Array<InspectUlimit>}
     * @memberof InspectContainerHostConfig
     */
    ulimits?: Array<InspectUlimit>;
    /**
     * UsernsMode represents the configuration of the container's user
     * namespace.
     * When running rootless, a user namespace is created outside of libpod
     * to allow some privileged operations. This will not be reflected here.
     * Populated as follows:
     * "" (empty string) - No user namespace will be created
     * private - The container will be run in a user namespace
     * container:<id> - Using another container's user namespace
     * ns:<path> - A path to a user namespace has been specified
     * TODO Rootless has an additional 'keep-id' option, presently not
     * reflected here.
     * @type {string}
     * @memberof InspectContainerHostConfig
     */
    usernsMode?: string;
    /**
     * VolumeDriver is presently unused and is retained for Docker
     * compatibility.
     * @type {string}
     * @memberof InspectContainerHostConfig
     */
    volumeDriver?: string;
    /**
     * VolumesFrom is a list of containers which this container uses volumes
     * from. This is not handled directly within libpod and is stored in an
     * annotation.
     * It is formatted as an array of container names and IDs.
     * @type {Array<string>}
     * @memberof InspectContainerHostConfig
     */
    volumesFrom?: Array<string>;
}

/**
 * Check if a given object implements the InspectContainerHostConfig interface.
 */
export function instanceOfInspectContainerHostConfig(value: object): value is InspectContainerHostConfig {
    return true;
}

export function InspectContainerHostConfigFromJSON(json: any): InspectContainerHostConfig {
    return InspectContainerHostConfigFromJSONTyped(json, false);
}

export function InspectContainerHostConfigFromJSONTyped(json: any, ignoreDiscriminator: boolean): InspectContainerHostConfig {
    if (json == null) {
        return json;
    }
    return {
        
        'annotations': json['Annotations'] == null ? undefined : json['Annotations'],
        'autoRemove': json['AutoRemove'] == null ? undefined : json['AutoRemove'],
        'binds': json['Binds'] == null ? undefined : json['Binds'],
        'blkioDeviceReadBps': json['BlkioDeviceReadBps'] == null ? undefined : ((json['BlkioDeviceReadBps'] as Array<any>).map(InspectBlkioThrottleDeviceFromJSON)),
        'blkioDeviceReadIOps': json['BlkioDeviceReadIOps'] == null ? undefined : ((json['BlkioDeviceReadIOps'] as Array<any>).map(InspectBlkioThrottleDeviceFromJSON)),
        'blkioDeviceWriteBps': json['BlkioDeviceWriteBps'] == null ? undefined : ((json['BlkioDeviceWriteBps'] as Array<any>).map(InspectBlkioThrottleDeviceFromJSON)),
        'blkioDeviceWriteIOps': json['BlkioDeviceWriteIOps'] == null ? undefined : ((json['BlkioDeviceWriteIOps'] as Array<any>).map(InspectBlkioThrottleDeviceFromJSON)),
        'blkioWeight': json['BlkioWeight'] == null ? undefined : json['BlkioWeight'],
        'blkioWeightDevice': json['BlkioWeightDevice'] == null ? undefined : ((json['BlkioWeightDevice'] as Array<any>).map(InspectBlkioWeightDeviceFromJSON)),
        'capAdd': json['CapAdd'] == null ? undefined : json['CapAdd'],
        'capDrop': json['CapDrop'] == null ? undefined : json['CapDrop'],
        'cgroup': json['Cgroup'] == null ? undefined : json['Cgroup'],
        'cgroupConf': json['CgroupConf'] == null ? undefined : json['CgroupConf'],
        'cgroupManager': json['CgroupManager'] == null ? undefined : json['CgroupManager'],
        'cgroupMode': json['CgroupMode'] == null ? undefined : json['CgroupMode'],
        'cgroupParent': json['CgroupParent'] == null ? undefined : json['CgroupParent'],
        'cgroups': json['Cgroups'] == null ? undefined : json['Cgroups'],
        'consoleSize': json['ConsoleSize'] == null ? undefined : json['ConsoleSize'],
        'containerIDFile': json['ContainerIDFile'] == null ? undefined : json['ContainerIDFile'],
        'cpuCount': json['CpuCount'] == null ? undefined : json['CpuCount'],
        'cpuPercent': json['CpuPercent'] == null ? undefined : json['CpuPercent'],
        'cpuPeriod': json['CpuPeriod'] == null ? undefined : json['CpuPeriod'],
        'cpuQuota': json['CpuQuota'] == null ? undefined : json['CpuQuota'],
        'cpuRealtimePeriod': json['CpuRealtimePeriod'] == null ? undefined : json['CpuRealtimePeriod'],
        'cpuRealtimeRuntime': json['CpuRealtimeRuntime'] == null ? undefined : json['CpuRealtimeRuntime'],
        'cpuShares': json['CpuShares'] == null ? undefined : json['CpuShares'],
        'cpusetCpus': json['CpusetCpus'] == null ? undefined : json['CpusetCpus'],
        'cpusetMems': json['CpusetMems'] == null ? undefined : json['CpusetMems'],
        'devices': json['Devices'] == null ? undefined : ((json['Devices'] as Array<any>).map(InspectDeviceFromJSON)),
        'diskQuota': json['DiskQuota'] == null ? undefined : json['DiskQuota'],
        'dns': json['Dns'] == null ? undefined : json['Dns'],
        'dnsOptions': json['DnsOptions'] == null ? undefined : json['DnsOptions'],
        'dnsSearch': json['DnsSearch'] == null ? undefined : json['DnsSearch'],
        'extraHosts': json['ExtraHosts'] == null ? undefined : json['ExtraHosts'],
        'groupAdd': json['GroupAdd'] == null ? undefined : json['GroupAdd'],
        'iDMappings': json['IDMappings'] == null ? undefined : InspectIDMappingsFromJSON(json['IDMappings']),
        'iOMaximumBandwidth': json['IOMaximumBandwidth'] == null ? undefined : json['IOMaximumBandwidth'],
        'iOMaximumIOps': json['IOMaximumIOps'] == null ? undefined : json['IOMaximumIOps'],
        'init': json['Init'] == null ? undefined : json['Init'],
        'intelRdtClosID': json['IntelRdtClosID'] == null ? undefined : json['IntelRdtClosID'],
        'ipcMode': json['IpcMode'] == null ? undefined : json['IpcMode'],
        'isolation': json['Isolation'] == null ? undefined : json['Isolation'],
        'kernelMemory': json['KernelMemory'] == null ? undefined : json['KernelMemory'],
        'links': json['Links'] == null ? undefined : json['Links'],
        'logConfig': json['LogConfig'] == null ? undefined : InspectLogConfigFromJSON(json['LogConfig']),
        'memory': json['Memory'] == null ? undefined : json['Memory'],
        'memoryReservation': json['MemoryReservation'] == null ? undefined : json['MemoryReservation'],
        'memorySwap': json['MemorySwap'] == null ? undefined : json['MemorySwap'],
        'memorySwappiness': json['MemorySwappiness'] == null ? undefined : json['MemorySwappiness'],
        'nanoCpus': json['NanoCpus'] == null ? undefined : json['NanoCpus'],
        'networkMode': json['NetworkMode'] == null ? undefined : json['NetworkMode'],
        'oomKillDisable': json['OomKillDisable'] == null ? undefined : json['OomKillDisable'],
        'oomScoreAdj': json['OomScoreAdj'] == null ? undefined : json['OomScoreAdj'],
        'pidMode': json['PidMode'] == null ? undefined : json['PidMode'],
        'pidsLimit': json['PidsLimit'] == null ? undefined : json['PidsLimit'],
        'portBindings': json['PortBindings'] == null ? undefined : json['PortBindings'],
        'privileged': json['Privileged'] == null ? undefined : json['Privileged'],
        'publishAllPorts': json['PublishAllPorts'] == null ? undefined : json['PublishAllPorts'],
        'readonlyRootfs': json['ReadonlyRootfs'] == null ? undefined : json['ReadonlyRootfs'],
        'restartPolicy': json['RestartPolicy'] == null ? undefined : InspectRestartPolicyFromJSON(json['RestartPolicy']),
        'runtime': json['Runtime'] == null ? undefined : json['Runtime'],
        'securityOpt': json['SecurityOpt'] == null ? undefined : json['SecurityOpt'],
        'shmSize': json['ShmSize'] == null ? undefined : json['ShmSize'],
        'tmpfs': json['Tmpfs'] == null ? undefined : json['Tmpfs'],
        'uTSMode': json['UTSMode'] == null ? undefined : json['UTSMode'],
        'ulimits': json['Ulimits'] == null ? undefined : ((json['Ulimits'] as Array<any>).map(InspectUlimitFromJSON)),
        'usernsMode': json['UsernsMode'] == null ? undefined : json['UsernsMode'],
        'volumeDriver': json['VolumeDriver'] == null ? undefined : json['VolumeDriver'],
        'volumesFrom': json['VolumesFrom'] == null ? undefined : json['VolumesFrom'],
    };
}

export function InspectContainerHostConfigToJSON(value?: InspectContainerHostConfig | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'Annotations': value['annotations'],
        'AutoRemove': value['autoRemove'],
        'Binds': value['binds'],
        'BlkioDeviceReadBps': value['blkioDeviceReadBps'] == null ? undefined : ((value['blkioDeviceReadBps'] as Array<any>).map(InspectBlkioThrottleDeviceToJSON)),
        'BlkioDeviceReadIOps': value['blkioDeviceReadIOps'] == null ? undefined : ((value['blkioDeviceReadIOps'] as Array<any>).map(InspectBlkioThrottleDeviceToJSON)),
        'BlkioDeviceWriteBps': value['blkioDeviceWriteBps'] == null ? undefined : ((value['blkioDeviceWriteBps'] as Array<any>).map(InspectBlkioThrottleDeviceToJSON)),
        'BlkioDeviceWriteIOps': value['blkioDeviceWriteIOps'] == null ? undefined : ((value['blkioDeviceWriteIOps'] as Array<any>).map(InspectBlkioThrottleDeviceToJSON)),
        'BlkioWeight': value['blkioWeight'],
        'BlkioWeightDevice': value['blkioWeightDevice'] == null ? undefined : ((value['blkioWeightDevice'] as Array<any>).map(InspectBlkioWeightDeviceToJSON)),
        'CapAdd': value['capAdd'],
        'CapDrop': value['capDrop'],
        'Cgroup': value['cgroup'],
        'CgroupConf': value['cgroupConf'],
        'CgroupManager': value['cgroupManager'],
        'CgroupMode': value['cgroupMode'],
        'CgroupParent': value['cgroupParent'],
        'Cgroups': value['cgroups'],
        'ConsoleSize': value['consoleSize'],
        'ContainerIDFile': value['containerIDFile'],
        'CpuCount': value['cpuCount'],
        'CpuPercent': value['cpuPercent'],
        'CpuPeriod': value['cpuPeriod'],
        'CpuQuota': value['cpuQuota'],
        'CpuRealtimePeriod': value['cpuRealtimePeriod'],
        'CpuRealtimeRuntime': value['cpuRealtimeRuntime'],
        'CpuShares': value['cpuShares'],
        'CpusetCpus': value['cpusetCpus'],
        'CpusetMems': value['cpusetMems'],
        'Devices': value['devices'] == null ? undefined : ((value['devices'] as Array<any>).map(InspectDeviceToJSON)),
        'DiskQuota': value['diskQuota'],
        'Dns': value['dns'],
        'DnsOptions': value['dnsOptions'],
        'DnsSearch': value['dnsSearch'],
        'ExtraHosts': value['extraHosts'],
        'GroupAdd': value['groupAdd'],
        'IDMappings': InspectIDMappingsToJSON(value['iDMappings']),
        'IOMaximumBandwidth': value['iOMaximumBandwidth'],
        'IOMaximumIOps': value['iOMaximumIOps'],
        'Init': value['init'],
        'IntelRdtClosID': value['intelRdtClosID'],
        'IpcMode': value['ipcMode'],
        'Isolation': value['isolation'],
        'KernelMemory': value['kernelMemory'],
        'Links': value['links'],
        'LogConfig': InspectLogConfigToJSON(value['logConfig']),
        'Memory': value['memory'],
        'MemoryReservation': value['memoryReservation'],
        'MemorySwap': value['memorySwap'],
        'MemorySwappiness': value['memorySwappiness'],
        'NanoCpus': value['nanoCpus'],
        'NetworkMode': value['networkMode'],
        'OomKillDisable': value['oomKillDisable'],
        'OomScoreAdj': value['oomScoreAdj'],
        'PidMode': value['pidMode'],
        'PidsLimit': value['pidsLimit'],
        'PortBindings': value['portBindings'],
        'Privileged': value['privileged'],
        'PublishAllPorts': value['publishAllPorts'],
        'ReadonlyRootfs': value['readonlyRootfs'],
        'RestartPolicy': InspectRestartPolicyToJSON(value['restartPolicy']),
        'Runtime': value['runtime'],
        'SecurityOpt': value['securityOpt'],
        'ShmSize': value['shmSize'],
        'Tmpfs': value['tmpfs'],
        'UTSMode': value['uTSMode'],
        'Ulimits': value['ulimits'] == null ? undefined : ((value['ulimits'] as Array<any>).map(InspectUlimitToJSON)),
        'UsernsMode': value['usernsMode'],
        'VolumeDriver': value['volumeDriver'],
        'VolumesFrom': value['volumesFrom'],
    };
}

