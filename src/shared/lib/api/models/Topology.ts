/* tslint:disable */
/* eslint-disable */
/**
 * supports a RESTful API for the Libpod library
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-system-service(1) for more information.  Quick Examples:  \'podman info\'  curl --unix-socket /run/podman/podman.sock http://d/v5.0.0/libpod/info  \'podman pull quay.io/containers/podman\'  curl -XPOST --unix-socket /run/podman/podman.sock -v \'http://d/v5.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman\'  \'podman list images\'  curl --unix-socket /run/podman/podman.sock -v \'http://d/v5.0.0/libpod/images/json\' | jq
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: podman@lists.podman.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * This description is taken verbatim from the CSI Spec:
 * 
 * A topological domain is a sub-division of a cluster, like "region",
 * "zone", "rack", etc.
 * A topological segment is a specific instance of a topological domain,
 * like "zone3", "rack3", etc.
 * For example {"com.company/zone": "Z1", "com.company/rack": "R3"}
 * Valid keys have two segments: an OPTIONAL prefix and name, separated
 * by a slash (/), for example: "com.company.example/zone".
 * The key name segment is REQUIRED. The prefix is OPTIONAL.
 * The key name MUST be 63 characters or less, begin and end with an
 * alphanumeric character ([a-z0-9A-Z]), and contain only dashes (-),
 * underscores (_), dots (.), or alphanumerics in between, for example
 * "zone".
 * The key prefix MUST be 63 characters or less, begin and end with a
 * lower-case alphanumeric character ([a-z0-9]), contain only
 * dashes (-), dots (.), or lower-case alphanumerics in between, and
 * follow domain name notation format
 * (https://tools.ietf.org/html/rfc1035#section-2.3.1).
 * The key prefix SHOULD include the plugin's host company name and/or
 * the plugin name, to minimize the possibility of collisions with keys
 * from other plugins.
 * If a key prefix is specified, it MUST be identical across all
 * topology keys returned by the SP (across all RPCs).
 * Keys MUST be case-insensitive. Meaning the keys "Zone" and "zone"
 * MUST not both exist.
 * Each value (topological segment) MUST contain 1 or more strings.
 * Each string MUST be 63 characters or less and begin and end with an
 * alphanumeric character with '-', '_', '.', or alphanumerics in
 * between.
 * @export
 * @interface Topology
 */
export interface Topology {
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof Topology
     */
    segments?: { [key: string]: string; };
}

/**
 * Check if a given object implements the Topology interface.
 */
export function instanceOfTopology(value: object): value is Topology {
    return true;
}

export function TopologyFromJSON(json: any): Topology {
    return TopologyFromJSONTyped(json, false);
}

export function TopologyFromJSONTyped(json: any, ignoreDiscriminator: boolean): Topology {
    if (json == null) {
        return json;
    }
    return {
        
        'segments': json['Segments'] == null ? undefined : json['Segments'],
    };
}

export function TopologyToJSON(value?: Topology | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'Segments': value['segments'],
    };
}

