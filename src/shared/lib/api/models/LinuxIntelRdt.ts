/* tslint:disable */
/* eslint-disable */
/**
 * supports a RESTful API for the Libpod library
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-system-service(1) for more information.  Quick Examples:  \'podman info\'  curl --unix-socket /run/podman/podman.sock http://d/v5.0.0/libpod/info  \'podman pull quay.io/containers/podman\'  curl -XPOST --unix-socket /run/podman/podman.sock -v \'http://d/v5.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman\'  \'podman list images\'  curl --unix-socket /run/podman/podman.sock -v \'http://d/v5.0.0/libpod/images/json\' | jq
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: podman@lists.podman.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * LinuxIntelRdt has container runtime resource constraints for Intel RDT CAT and MBA
 * features and flags enabling Intel RDT CMT and MBM features.
 * Intel RDT features are available in Linux 4.14 and newer kernel versions.
 * @export
 * @interface LinuxIntelRdt
 */
export interface LinuxIntelRdt {
    /**
     * The identity for RDT Class of Service
     * @type {string}
     * @memberof LinuxIntelRdt
     */
    closID?: string;
    /**
     * EnableCMT is the flag to indicate if the Intel RDT CMT is enabled. CMT (Cache Monitoring Technology) supports monitoring of
     * the last-level cache (LLC) occupancy for the container.
     * @type {boolean}
     * @memberof LinuxIntelRdt
     */
    enableCMT?: boolean;
    /**
     * EnableMBM is the flag to indicate if the Intel RDT MBM is enabled. MBM (Memory Bandwidth Monitoring) supports monitoring of
     * total and local memory bandwidth for the container.
     * @type {boolean}
     * @memberof LinuxIntelRdt
     */
    enableMBM?: boolean;
    /**
     * The schema for L3 cache id and capacity bitmask (CBM)
     * Format: "L3:<cache_id0>=<cbm0>;<cache_id1>=<cbm1>;..."
     * @type {string}
     * @memberof LinuxIntelRdt
     */
    l3CacheSchema?: string;
    /**
     * The schema of memory bandwidth per L3 cache id
     * Format: "MB:<cache_id0>=bandwidth0;<cache_id1>=bandwidth1;..."
     * The unit of memory bandwidth is specified in "percentages" by
     * default, and in "MBps" if MBA Software Controller is enabled.
     * @type {string}
     * @memberof LinuxIntelRdt
     */
    memBwSchema?: string;
}

/**
 * Check if a given object implements the LinuxIntelRdt interface.
 */
export function instanceOfLinuxIntelRdt(value: object): value is LinuxIntelRdt {
    return true;
}

export function LinuxIntelRdtFromJSON(json: any): LinuxIntelRdt {
    return LinuxIntelRdtFromJSONTyped(json, false);
}

export function LinuxIntelRdtFromJSONTyped(json: any, ignoreDiscriminator: boolean): LinuxIntelRdt {
    if (json == null) {
        return json;
    }
    return {
        
        'closID': json['closID'] == null ? undefined : json['closID'],
        'enableCMT': json['enableCMT'] == null ? undefined : json['enableCMT'],
        'enableMBM': json['enableMBM'] == null ? undefined : json['enableMBM'],
        'l3CacheSchema': json['l3CacheSchema'] == null ? undefined : json['l3CacheSchema'],
        'memBwSchema': json['memBwSchema'] == null ? undefined : json['memBwSchema'],
    };
}

export function LinuxIntelRdtToJSON(value?: LinuxIntelRdt | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'closID': value['closID'],
        'enableCMT': value['enableCMT'],
        'enableMBM': value['enableMBM'],
        'l3CacheSchema': value['l3CacheSchema'],
        'memBwSchema': value['memBwSchema'],
    };
}

