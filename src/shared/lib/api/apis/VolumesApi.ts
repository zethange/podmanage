/* tslint:disable */
/* eslint-disable */
/**
 * supports a RESTful API for the Libpod library
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-system-service(1) for more information.  Quick Examples:  \'podman info\'  curl --unix-socket /run/podman/podman.sock http://d/v5.0.0/libpod/info  \'podman pull quay.io/containers/podman\'  curl -XPOST --unix-socket /run/podman/podman.sock -v \'http://d/v5.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman\'  \'podman list images\'  curl --unix-socket /run/podman/podman.sock -v \'http://d/v5.0.0/libpod/images/json\' | jq
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: podman@lists.podman.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorModel,
  PruneReport,
  VolumeConfigResponse,
  VolumeCreateOptions,
} from '../models/index';
import {
    ErrorModelFromJSON,
    ErrorModelToJSON,
    PruneReportFromJSON,
    PruneReportToJSON,
    VolumeConfigResponseFromJSON,
    VolumeConfigResponseToJSON,
    VolumeCreateOptionsFromJSON,
    VolumeCreateOptionsToJSON,
} from '../models/index';

export interface VolumeCreateLibpodRequest {
    create?: VolumeCreateOptions;
}

export interface VolumeDeleteLibpodRequest {
    name: string;
    force?: boolean;
}

export interface VolumeExistsLibpodRequest {
    name: string;
}

export interface VolumeInspectLibpodRequest {
    name: string;
}

export interface VolumeListLibpodRequest {
    filters?: string;
}

export interface VolumePruneLibpodRequest {
    filters?: string;
}

/**
 * 
 */
export class VolumesApi extends runtime.BaseAPI {

    /**
     * Create a volume
     */
    async volumeCreateLibpodRaw(requestParameters: VolumeCreateLibpodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VolumeConfigResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/libpod/volumes/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VolumeCreateOptionsToJSON(requestParameters['create']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VolumeConfigResponseFromJSON(jsonValue));
    }

    /**
     * Create a volume
     */
    async volumeCreateLibpod(requestParameters: VolumeCreateLibpodRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VolumeConfigResponse> {
        const response = await this.volumeCreateLibpodRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove volume
     */
    async volumeDeleteLibpodRaw(requestParameters: VolumeDeleteLibpodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling volumeDeleteLibpod().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['force'] != null) {
            queryParameters['force'] = requestParameters['force'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/libpod/volumes/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove volume
     */
    async volumeDeleteLibpod(requestParameters: VolumeDeleteLibpodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.volumeDeleteLibpodRaw(requestParameters, initOverrides);
    }

    /**
     * Check if a volume exists
     * Volume exists
     */
    async volumeExistsLibpodRaw(requestParameters: VolumeExistsLibpodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling volumeExistsLibpod().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/libpod/volumes/{name}/exists`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Check if a volume exists
     * Volume exists
     */
    async volumeExistsLibpod(requestParameters: VolumeExistsLibpodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.volumeExistsLibpodRaw(requestParameters, initOverrides);
    }

    /**
     * Inspect volume
     */
    async volumeInspectLibpodRaw(requestParameters: VolumeInspectLibpodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VolumeConfigResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling volumeInspectLibpod().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/libpod/volumes/{name}/json`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VolumeConfigResponseFromJSON(jsonValue));
    }

    /**
     * Inspect volume
     */
    async volumeInspectLibpod(requestParameters: VolumeInspectLibpodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VolumeConfigResponse> {
        const response = await this.volumeInspectLibpodRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of volumes
     * List volumes
     */
    async volumeListLibpodRaw(requestParameters: VolumeListLibpodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<VolumeConfigResponse>>> {
        const queryParameters: any = {};

        if (requestParameters['filters'] != null) {
            queryParameters['filters'] = requestParameters['filters'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/libpod/volumes/json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(VolumeConfigResponseFromJSON));
    }

    /**
     * Returns a list of volumes
     * List volumes
     */
    async volumeListLibpod(requestParameters: VolumeListLibpodRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<VolumeConfigResponse>> {
        const response = await this.volumeListLibpodRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Prune volumes
     */
    async volumePruneLibpodRaw(requestParameters: VolumePruneLibpodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PruneReport>>> {
        const queryParameters: any = {};

        if (requestParameters['filters'] != null) {
            queryParameters['filters'] = requestParameters['filters'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/libpod/volumes/prune`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PruneReportFromJSON));
    }

    /**
     * Prune volumes
     */
    async volumePruneLibpod(requestParameters: VolumePruneLibpodRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PruneReport>> {
        const response = await this.volumePruneLibpodRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
