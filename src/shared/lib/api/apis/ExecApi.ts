/* tslint:disable */
/* eslint-disable */
/**
 * supports a RESTful API for the Libpod library
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-system-service(1) for more information.  Quick Examples:  \'podman info\'  curl --unix-socket /run/podman/podman.sock http://d/v5.0.0/libpod/info  \'podman pull quay.io/containers/podman\'  curl -XPOST --unix-socket /run/podman/podman.sock -v \'http://d/v5.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman\'  \'podman list images\'  curl --unix-socket /run/podman/podman.sock -v \'http://d/v5.0.0/libpod/images/json\' | jq
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: podman@lists.podman.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ContainerExecRequest,
  ErrorModel,
  ExecStartLibpodRequest,
} from '../models/index';
import {
    ContainerExecRequestFromJSON,
    ContainerExecRequestToJSON,
    ErrorModelFromJSON,
    ErrorModelToJSON,
    ExecStartLibpodRequestFromJSON,
    ExecStartLibpodRequestToJSON,
} from '../models/index';

export interface ContainerExecLibpodRequest {
    name: string;
    control?: ContainerExecRequest;
}

export interface ExecInspectLibpodRequest {
    id: string;
}

export interface ExecResizeLibpodRequest {
    id: string;
    h?: number;
    w?: number;
}

export interface ExecStartLibpodOperationRequest {
    id: string;
    control?: ExecStartLibpodRequest;
}

/**
 * 
 */
export class ExecApi extends runtime.BaseAPI {

    /**
     * Create an exec session to run a command inside a running container. Exec sessions will be automatically removed 5 minutes after they exit.
     * Create an exec instance
     */
    async containerExecLibpodRaw(requestParameters: ContainerExecLibpodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling containerExecLibpod().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/libpod/containers/{name}/exec`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ContainerExecRequestToJSON(requestParameters['control']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create an exec session to run a command inside a running container. Exec sessions will be automatically removed 5 minutes after they exit.
     * Create an exec instance
     */
    async containerExecLibpod(requestParameters: ContainerExecLibpodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.containerExecLibpodRaw(requestParameters, initOverrides);
    }

    /**
     * Return low-level information about an exec instance.
     * Inspect an exec instance
     */
    async execInspectLibpodRaw(requestParameters: ExecInspectLibpodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling execInspectLibpod().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/libpod/exec/{id}/json`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Return low-level information about an exec instance.
     * Inspect an exec instance
     */
    async execInspectLibpod(requestParameters: ExecInspectLibpodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.execInspectLibpodRaw(requestParameters, initOverrides);
    }

    /**
     * Resize the TTY session used by an exec instance. This endpoint only works if tty was specified as part of creating and starting the exec instance. 
     * Resize an exec instance
     */
    async execResizeLibpodRaw(requestParameters: ExecResizeLibpodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling execResizeLibpod().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['h'] != null) {
            queryParameters['h'] = requestParameters['h'];
        }

        if (requestParameters['w'] != null) {
            queryParameters['w'] = requestParameters['w'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/libpod/exec/{id}/resize`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Resize the TTY session used by an exec instance. This endpoint only works if tty was specified as part of creating and starting the exec instance. 
     * Resize an exec instance
     */
    async execResizeLibpod(requestParameters: ExecResizeLibpodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.execResizeLibpodRaw(requestParameters, initOverrides);
    }

    /**
     * Starts a previously set up exec instance. If detach is true, this endpoint returns immediately after starting the command. Otherwise, it sets up an interactive session with the command. The stream format is the same as the attach endpoint. 
     * Start an exec instance
     */
    async execStartLibpodRaw(requestParameters: ExecStartLibpodOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling execStartLibpod().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/libpod/exec/{id}/start`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ExecStartLibpodRequestToJSON(requestParameters['control']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Starts a previously set up exec instance. If detach is true, this endpoint returns immediately after starting the command. Otherwise, it sets up an interactive session with the command. The stream format is the same as the attach endpoint. 
     * Start an exec instance
     */
    async execStartLibpod(requestParameters: ExecStartLibpodOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.execStartLibpodRaw(requestParameters, initOverrides);
    }

}
