/* tslint:disable */
/* eslint-disable */
/**
 * supports a RESTful API for the Libpod library
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-system-service(1) for more information.  Quick Examples:  \'podman info\'  curl --unix-socket /run/podman/podman.sock http://d/v5.0.0/libpod/info  \'podman pull quay.io/containers/podman\'  curl -XPOST --unix-socket /run/podman/podman.sock -v \'http://d/v5.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman\'  \'podman list images\'  curl --unix-socket /run/podman/podman.sock -v \'http://d/v5.0.0/libpod/images/json\' | jq
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: podman@lists.podman.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorModel,
  Network,
  NetworkConnectOptions,
  NetworkCreateLibpod,
  NetworkDisconnect,
  NetworkInspectReport,
  NetworkPruneReport,
  NetworkRmReport,
  NetworkUpdateOptions,
} from '../models/index';
import {
    ErrorModelFromJSON,
    ErrorModelToJSON,
    NetworkFromJSON,
    NetworkToJSON,
    NetworkConnectOptionsFromJSON,
    NetworkConnectOptionsToJSON,
    NetworkCreateLibpodFromJSON,
    NetworkCreateLibpodToJSON,
    NetworkDisconnectFromJSON,
    NetworkDisconnectToJSON,
    NetworkInspectReportFromJSON,
    NetworkInspectReportToJSON,
    NetworkPruneReportFromJSON,
    NetworkPruneReportToJSON,
    NetworkRmReportFromJSON,
    NetworkRmReportToJSON,
    NetworkUpdateOptionsFromJSON,
    NetworkUpdateOptionsToJSON,
} from '../models/index';

export interface NetworkConnectLibpodRequest {
    name: string;
    create?: NetworkConnectOptions;
}

export interface NetworkCreateLibpodRequest {
    create?: NetworkCreateLibpod;
}

export interface NetworkDeleteLibpodRequest {
    name: string;
    force?: boolean;
}

export interface NetworkDisconnectLibpodRequest {
    name: string;
    create?: NetworkDisconnect;
}

export interface NetworkExistsLibpodRequest {
    name: string;
}

export interface NetworkInspectLibpodRequest {
    name: string;
}

export interface NetworkListLibpodRequest {
    filters?: string;
}

export interface NetworkPruneLibpodRequest {
    filters?: string;
}

export interface NetworkUpdateLibpodRequest {
    name: string;
    update?: NetworkUpdateOptions;
}

/**
 * 
 */
export class NetworksApi extends runtime.BaseAPI {

    /**
     * Connect a container to a network.
     * Connect container to network
     */
    async networkConnectLibpodRaw(requestParameters: NetworkConnectLibpodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling networkConnectLibpod().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/libpod/networks/{name}/connect`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['create'] as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Connect a container to a network.
     * Connect container to network
     */
    async networkConnectLibpod(requestParameters: NetworkConnectLibpodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.networkConnectLibpodRaw(requestParameters, initOverrides);
    }

    /**
     * Create a new network configuration
     * Create network
     */
    async networkCreateLibpodRaw(requestParameters: NetworkCreateLibpodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Network>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/libpod/networks/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NetworkCreateLibpodToJSON(requestParameters['create']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NetworkFromJSON(jsonValue));
    }

    /**
     * Create a new network configuration
     * Create network
     */
    async networkCreateLibpod(requestParameters: NetworkCreateLibpodRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Network> {
        const response = await this.networkCreateLibpodRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove a configured network
     * Remove a network
     */
    async networkDeleteLibpodRaw(requestParameters: NetworkDeleteLibpodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<NetworkRmReport>>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling networkDeleteLibpod().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['force'] != null) {
            queryParameters['force'] = requestParameters['force'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/libpod/networks/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(NetworkRmReportFromJSON));
    }

    /**
     * Remove a configured network
     * Remove a network
     */
    async networkDeleteLibpod(requestParameters: NetworkDeleteLibpodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<NetworkRmReport>> {
        const response = await this.networkDeleteLibpodRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Disconnect a container from a network.
     * Disconnect container from network
     */
    async networkDisconnectLibpodRaw(requestParameters: NetworkDisconnectLibpodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling networkDisconnectLibpod().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/libpod/networks/{name}/disconnect`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['create'] as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Disconnect a container from a network.
     * Disconnect container from network
     */
    async networkDisconnectLibpod(requestParameters: NetworkDisconnectLibpodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.networkDisconnectLibpodRaw(requestParameters, initOverrides);
    }

    /**
     * Check if network exists
     * Network exists
     */
    async networkExistsLibpodRaw(requestParameters: NetworkExistsLibpodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling networkExistsLibpod().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/libpod/networks/{name}/exists`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Check if network exists
     * Network exists
     */
    async networkExistsLibpod(requestParameters: NetworkExistsLibpodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.networkExistsLibpodRaw(requestParameters, initOverrides);
    }

    /**
     * Display configuration for a network. 
     * Inspect a network
     */
    async networkInspectLibpodRaw(requestParameters: NetworkInspectLibpodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NetworkInspectReport>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling networkInspectLibpod().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/libpod/networks/{name}/json`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NetworkInspectReportFromJSON(jsonValue));
    }

    /**
     * Display configuration for a network. 
     * Inspect a network
     */
    async networkInspectLibpod(requestParameters: NetworkInspectLibpodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NetworkInspectReport> {
        const response = await this.networkInspectLibpodRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Display summary of network configurations.   - In a 200 response, all of the fields named Bytes are returned as a Base64 encoded string. 
     * List networks
     */
    async networkListLibpodRaw(requestParameters: NetworkListLibpodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Network>>> {
        const queryParameters: any = {};

        if (requestParameters['filters'] != null) {
            queryParameters['filters'] = requestParameters['filters'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/libpod/networks/json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(NetworkFromJSON));
    }

    /**
     * Display summary of network configurations.   - In a 200 response, all of the fields named Bytes are returned as a Base64 encoded string. 
     * List networks
     */
    async networkListLibpod(requestParameters: NetworkListLibpodRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Network>> {
        const response = await this.networkListLibpodRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove networks that do not have containers
     * Delete unused networks
     */
    async networkPruneLibpodRaw(requestParameters: NetworkPruneLibpodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<NetworkPruneReport>>> {
        const queryParameters: any = {};

        if (requestParameters['filters'] != null) {
            queryParameters['filters'] = requestParameters['filters'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/libpod/networks/prune`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(NetworkPruneReportFromJSON));
    }

    /**
     * Remove networks that do not have containers
     * Delete unused networks
     */
    async networkPruneLibpod(requestParameters: NetworkPruneLibpodRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<NetworkPruneReport>> {
        const response = await this.networkPruneLibpodRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update existing podman network
     * Update existing podman network
     */
    async networkUpdateLibpodRaw(requestParameters: NetworkUpdateLibpodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling networkUpdateLibpod().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/libpod/networks/{name}/update`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['update'] as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update existing podman network
     * Update existing podman network
     */
    async networkUpdateLibpod(requestParameters: NetworkUpdateLibpodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.networkUpdateLibpodRaw(requestParameters, initOverrides);
    }

}
