/* tslint:disable */
/* eslint-disable */
/**
 * supports a RESTful API for the Libpod library
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-system-service(1) for more information.  Quick Examples:  \'podman info\'  curl --unix-socket /run/podman/podman.sock http://d/v5.0.0/libpod/info  \'podman pull quay.io/containers/podman\'  curl -XPOST --unix-socket /run/podman/podman.sock -v \'http://d/v5.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman\'  \'podman list images\'  curl --unix-socket /run/podman/podman.sock -v \'http://d/v5.0.0/libpod/images/json\' | jq
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: podman@lists.podman.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorModel,
  IdResponse,
  LibpodImagesRemoveReport,
  ManifestAddOptions,
  ManifestModifyOptions,
  ManifestModifyReport,
  Schema2ListPublic,
} from '../models/index';
import {
    ErrorModelFromJSON,
    ErrorModelToJSON,
    IdResponseFromJSON,
    IdResponseToJSON,
    LibpodImagesRemoveReportFromJSON,
    LibpodImagesRemoveReportToJSON,
    ManifestAddOptionsFromJSON,
    ManifestAddOptionsToJSON,
    ManifestModifyOptionsFromJSON,
    ManifestModifyOptionsToJSON,
    ManifestModifyReportFromJSON,
    ManifestModifyReportToJSON,
    Schema2ListPublicFromJSON,
    Schema2ListPublicToJSON,
} from '../models/index';

export interface ManifestAddLibpodRequest {
    name: string;
    options?: ManifestAddOptions;
}

export interface ManifestCreateLibpodRequest {
    name: string;
    images: string;
    all?: boolean;
    amend?: boolean;
    options?: ManifestModifyOptions;
}

export interface ManifestDeleteLibpodRequest {
    name: string;
}

export interface ManifestExistsLibpodRequest {
    name: string;
}

export interface ManifestInspectLibpodRequest {
    name: string;
    tlsVerify?: boolean;
}

export interface ManifestModifyLibpodRequest {
    name: string;
    options: ManifestModifyOptions;
    tlsVerify?: boolean;
}

export interface ManifestPushLibpodRequest {
    name: string;
    destination: string;
    addCompression?: Array<string>;
    forceCompressionFormat?: boolean;
    all?: boolean;
    tlsVerify?: boolean;
    quiet?: boolean;
}

export interface ManifestPushV3LibpodRequest {
    name: string;
    destination: string;
    all?: boolean;
}

/**
 * 
 */
export class ManifestsApi extends runtime.BaseAPI {

    /**
     * Add an image to a manifest list  Deprecated: As of 4.0.0 use ManifestModifyLibpod instead 
     * Add image
     */
    async manifestAddLibpodRaw(requestParameters: ManifestAddLibpodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling manifestAddLibpod().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/libpod/manifests/{name}/add`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ManifestAddOptionsToJSON(requestParameters['options']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdResponseFromJSON(jsonValue));
    }

    /**
     * Add an image to a manifest list  Deprecated: As of 4.0.0 use ManifestModifyLibpod instead 
     * Add image
     */
    async manifestAddLibpod(requestParameters: ManifestAddLibpodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdResponse> {
        const response = await this.manifestAddLibpodRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a manifest list
     * Create
     */
    async manifestCreateLibpodRaw(requestParameters: ManifestCreateLibpodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling manifestCreateLibpod().'
            );
        }

        if (requestParameters['images'] == null) {
            throw new runtime.RequiredError(
                'images',
                'Required parameter "images" was null or undefined when calling manifestCreateLibpod().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['images'] != null) {
            queryParameters['images'] = requestParameters['images'];
        }

        if (requestParameters['all'] != null) {
            queryParameters['all'] = requestParameters['all'];
        }

        if (requestParameters['amend'] != null) {
            queryParameters['amend'] = requestParameters['amend'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/libpod/manifests/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ManifestModifyOptionsToJSON(requestParameters['options']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdResponseFromJSON(jsonValue));
    }

    /**
     * Create a manifest list
     * Create
     */
    async manifestCreateLibpod(requestParameters: ManifestCreateLibpodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdResponse> {
        const response = await this.manifestCreateLibpodRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete named manifest list  As of v4.0.0 
     * Delete manifest list
     */
    async manifestDeleteLibpodRaw(requestParameters: ManifestDeleteLibpodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LibpodImagesRemoveReport>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling manifestDeleteLibpod().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/libpod/manifests/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LibpodImagesRemoveReportFromJSON(jsonValue));
    }

    /**
     * Delete named manifest list  As of v4.0.0 
     * Delete manifest list
     */
    async manifestDeleteLibpod(requestParameters: ManifestDeleteLibpodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LibpodImagesRemoveReport> {
        const response = await this.manifestDeleteLibpodRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Check if manifest list exists  Note: There is no contract that the manifest list will exist for a follow-on operation 
     * Exists
     */
    async manifestExistsLibpodRaw(requestParameters: ManifestExistsLibpodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling manifestExistsLibpod().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/libpod/manifests/{name}/exists`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Check if manifest list exists  Note: There is no contract that the manifest list will exist for a follow-on operation 
     * Exists
     */
    async manifestExistsLibpod(requestParameters: ManifestExistsLibpodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.manifestExistsLibpodRaw(requestParameters, initOverrides);
    }

    /**
     * Display attributes of given manifest list
     * Inspect
     */
    async manifestInspectLibpodRaw(requestParameters: ManifestInspectLibpodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Schema2ListPublic>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling manifestInspectLibpod().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['tlsVerify'] != null) {
            queryParameters['tlsVerify'] = requestParameters['tlsVerify'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/libpod/manifests/{name}/json`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => Schema2ListPublicFromJSON(jsonValue));
    }

    /**
     * Display attributes of given manifest list
     * Inspect
     */
    async manifestInspectLibpod(requestParameters: ManifestInspectLibpodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Schema2ListPublic> {
        const response = await this.manifestInspectLibpodRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add/Remove an image(s) to a manifest list  Note: operations are not atomic when multiple Images are provided.  As of v4.0.0 
     * Modify manifest list
     */
    async manifestModifyLibpodRaw(requestParameters: ManifestModifyLibpodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ManifestModifyReport>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling manifestModifyLibpod().'
            );
        }

        if (requestParameters['options'] == null) {
            throw new runtime.RequiredError(
                'options',
                'Required parameter "options" was null or undefined when calling manifestModifyLibpod().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['tlsVerify'] != null) {
            queryParameters['tlsVerify'] = requestParameters['tlsVerify'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/libpod/manifests/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ManifestModifyOptionsToJSON(requestParameters['options']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ManifestModifyReportFromJSON(jsonValue));
    }

    /**
     * Add/Remove an image(s) to a manifest list  Note: operations are not atomic when multiple Images are provided.  As of v4.0.0 
     * Modify manifest list
     */
    async manifestModifyLibpod(requestParameters: ManifestModifyLibpodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ManifestModifyReport> {
        const response = await this.manifestModifyLibpodRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Push a manifest list or image index to the named registry  As of v4.0.0 
     * Push manifest list to registry
     */
    async manifestPushLibpodRaw(requestParameters: ManifestPushLibpodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling manifestPushLibpod().'
            );
        }

        if (requestParameters['destination'] == null) {
            throw new runtime.RequiredError(
                'destination',
                'Required parameter "destination" was null or undefined when calling manifestPushLibpod().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['addCompression'] != null) {
            queryParameters['addCompression'] = requestParameters['addCompression']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['forceCompressionFormat'] != null) {
            queryParameters['forceCompressionFormat'] = requestParameters['forceCompressionFormat'];
        }

        if (requestParameters['all'] != null) {
            queryParameters['all'] = requestParameters['all'];
        }

        if (requestParameters['tlsVerify'] != null) {
            queryParameters['tlsVerify'] = requestParameters['tlsVerify'];
        }

        if (requestParameters['quiet'] != null) {
            queryParameters['quiet'] = requestParameters['quiet'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/libpod/manifests/{name}/registry/{destination}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"destination"}}`, encodeURIComponent(String(requestParameters['destination']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdResponseFromJSON(jsonValue));
    }

    /**
     * Push a manifest list or image index to the named registry  As of v4.0.0 
     * Push manifest list to registry
     */
    async manifestPushLibpod(requestParameters: ManifestPushLibpodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdResponse> {
        const response = await this.manifestPushLibpodRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Push a manifest list or image index to a registry  Deprecated: As of 4.0.0 use ManifestPushLibpod instead 
     * Push manifest to registry
     */
    async manifestPushV3LibpodRaw(requestParameters: ManifestPushV3LibpodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling manifestPushV3Libpod().'
            );
        }

        if (requestParameters['destination'] == null) {
            throw new runtime.RequiredError(
                'destination',
                'Required parameter "destination" was null or undefined when calling manifestPushV3Libpod().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['destination'] != null) {
            queryParameters['destination'] = requestParameters['destination'];
        }

        if (requestParameters['all'] != null) {
            queryParameters['all'] = requestParameters['all'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/libpod/manifests/{name}/push`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdResponseFromJSON(jsonValue));
    }

    /**
     * Push a manifest list or image index to a registry  Deprecated: As of 4.0.0 use ManifestPushLibpod instead 
     * Push manifest to registry
     */
    async manifestPushV3Libpod(requestParameters: ManifestPushV3LibpodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdResponse> {
        const response = await this.manifestPushV3LibpodRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
